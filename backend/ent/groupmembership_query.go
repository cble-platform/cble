// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/cble-platform/cble/backend/ent/group"
	"github.com/cble-platform/cble/backend/ent/groupmembership"
	"github.com/cble-platform/cble/backend/ent/predicate"
	"github.com/cble-platform/cble/backend/ent/project"
	"github.com/google/uuid"
)

// GroupMembershipQuery is the builder for querying GroupMembership entities.
type GroupMembershipQuery struct {
	config
	ctx         *QueryContext
	order       []groupmembership.OrderOption
	inters      []Interceptor
	predicates  []predicate.GroupMembership
	withProject *ProjectQuery
	withGroup   *GroupQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GroupMembershipQuery builder.
func (gmq *GroupMembershipQuery) Where(ps ...predicate.GroupMembership) *GroupMembershipQuery {
	gmq.predicates = append(gmq.predicates, ps...)
	return gmq
}

// Limit the number of records to be returned by this query.
func (gmq *GroupMembershipQuery) Limit(limit int) *GroupMembershipQuery {
	gmq.ctx.Limit = &limit
	return gmq
}

// Offset to start from.
func (gmq *GroupMembershipQuery) Offset(offset int) *GroupMembershipQuery {
	gmq.ctx.Offset = &offset
	return gmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gmq *GroupMembershipQuery) Unique(unique bool) *GroupMembershipQuery {
	gmq.ctx.Unique = &unique
	return gmq
}

// Order specifies how the records should be ordered.
func (gmq *GroupMembershipQuery) Order(o ...groupmembership.OrderOption) *GroupMembershipQuery {
	gmq.order = append(gmq.order, o...)
	return gmq
}

// QueryProject chains the current query on the "project" edge.
func (gmq *GroupMembershipQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: gmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(groupmembership.Table, groupmembership.ProjectColumn, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, groupmembership.ProjectTable, groupmembership.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(gmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroup chains the current query on the "group" edge.
func (gmq *GroupMembershipQuery) QueryGroup() *GroupQuery {
	query := (&GroupClient{config: gmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(groupmembership.Table, groupmembership.GroupColumn, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, groupmembership.GroupTable, groupmembership.GroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(gmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GroupMembership entity from the query.
// Returns a *NotFoundError when no GroupMembership was found.
func (gmq *GroupMembershipQuery) First(ctx context.Context) (*GroupMembership, error) {
	nodes, err := gmq.Limit(1).All(setContextOp(ctx, gmq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{groupmembership.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gmq *GroupMembershipQuery) FirstX(ctx context.Context) *GroupMembership {
	node, err := gmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single GroupMembership entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GroupMembership entity is found.
// Returns a *NotFoundError when no GroupMembership entities are found.
func (gmq *GroupMembershipQuery) Only(ctx context.Context) (*GroupMembership, error) {
	nodes, err := gmq.Limit(2).All(setContextOp(ctx, gmq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{groupmembership.Label}
	default:
		return nil, &NotSingularError{groupmembership.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gmq *GroupMembershipQuery) OnlyX(ctx context.Context) *GroupMembership {
	node, err := gmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of GroupMemberships.
func (gmq *GroupMembershipQuery) All(ctx context.Context) ([]*GroupMembership, error) {
	ctx = setContextOp(ctx, gmq.ctx, "All")
	if err := gmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GroupMembership, *GroupMembershipQuery]()
	return withInterceptors[[]*GroupMembership](ctx, gmq, qr, gmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gmq *GroupMembershipQuery) AllX(ctx context.Context) []*GroupMembership {
	nodes, err := gmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (gmq *GroupMembershipQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gmq.ctx, "Count")
	if err := gmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gmq, querierCount[*GroupMembershipQuery](), gmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gmq *GroupMembershipQuery) CountX(ctx context.Context) int {
	count, err := gmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gmq *GroupMembershipQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gmq.ctx, "Exist")
	switch _, err := gmq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gmq *GroupMembershipQuery) ExistX(ctx context.Context) bool {
	exist, err := gmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GroupMembershipQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gmq *GroupMembershipQuery) Clone() *GroupMembershipQuery {
	if gmq == nil {
		return nil
	}
	return &GroupMembershipQuery{
		config:      gmq.config,
		ctx:         gmq.ctx.Clone(),
		order:       append([]groupmembership.OrderOption{}, gmq.order...),
		inters:      append([]Interceptor{}, gmq.inters...),
		predicates:  append([]predicate.GroupMembership{}, gmq.predicates...),
		withProject: gmq.withProject.Clone(),
		withGroup:   gmq.withGroup.Clone(),
		// clone intermediate query.
		sql:  gmq.sql.Clone(),
		path: gmq.path,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (gmq *GroupMembershipQuery) WithProject(opts ...func(*ProjectQuery)) *GroupMembershipQuery {
	query := (&ProjectClient{config: gmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gmq.withProject = query
	return gmq
}

// WithGroup tells the query-builder to eager-load the nodes that are connected to
// the "group" edge. The optional arguments are used to configure the query builder of the edge.
func (gmq *GroupMembershipQuery) WithGroup(opts ...func(*GroupQuery)) *GroupMembershipQuery {
	query := (&GroupClient{config: gmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gmq.withGroup = query
	return gmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ProjectID uuid.UUID `json:"project_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GroupMembership.Query().
//		GroupBy(groupmembership.FieldProjectID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gmq *GroupMembershipQuery) GroupBy(field string, fields ...string) *GroupMembershipGroupBy {
	gmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GroupMembershipGroupBy{build: gmq}
	grbuild.flds = &gmq.ctx.Fields
	grbuild.label = groupmembership.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ProjectID uuid.UUID `json:"project_id,omitempty"`
//	}
//
//	client.GroupMembership.Query().
//		Select(groupmembership.FieldProjectID).
//		Scan(ctx, &v)
func (gmq *GroupMembershipQuery) Select(fields ...string) *GroupMembershipSelect {
	gmq.ctx.Fields = append(gmq.ctx.Fields, fields...)
	sbuild := &GroupMembershipSelect{GroupMembershipQuery: gmq}
	sbuild.label = groupmembership.Label
	sbuild.flds, sbuild.scan = &gmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GroupMembershipSelect configured with the given aggregations.
func (gmq *GroupMembershipQuery) Aggregate(fns ...AggregateFunc) *GroupMembershipSelect {
	return gmq.Select().Aggregate(fns...)
}

func (gmq *GroupMembershipQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gmq); err != nil {
				return err
			}
		}
	}
	for _, f := range gmq.ctx.Fields {
		if !groupmembership.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gmq.path != nil {
		prev, err := gmq.path(ctx)
		if err != nil {
			return err
		}
		gmq.sql = prev
	}
	return nil
}

func (gmq *GroupMembershipQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GroupMembership, error) {
	var (
		nodes       = []*GroupMembership{}
		_spec       = gmq.querySpec()
		loadedTypes = [2]bool{
			gmq.withProject != nil,
			gmq.withGroup != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GroupMembership).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GroupMembership{config: gmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gmq.withProject; query != nil {
		if err := gmq.loadProject(ctx, query, nodes, nil,
			func(n *GroupMembership, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	if query := gmq.withGroup; query != nil {
		if err := gmq.loadGroup(ctx, query, nodes, nil,
			func(n *GroupMembership, e *Group) { n.Edges.Group = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gmq *GroupMembershipQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*GroupMembership, init func(*GroupMembership), assign func(*GroupMembership, *Project)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*GroupMembership)
	for i := range nodes {
		fk := nodes[i].ProjectID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gmq *GroupMembershipQuery) loadGroup(ctx context.Context, query *GroupQuery, nodes []*GroupMembership, init func(*GroupMembership), assign func(*GroupMembership, *Group)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*GroupMembership)
	for i := range nodes {
		fk := nodes[i].GroupID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(group.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "group_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (gmq *GroupMembershipQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gmq.querySpec()
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, gmq.driver, _spec)
}

func (gmq *GroupMembershipQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(groupmembership.Table, groupmembership.Columns, nil)
	_spec.From = gmq.sql
	if unique := gmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gmq.path != nil {
		_spec.Unique = true
	}
	if fields := gmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
		if gmq.withProject != nil {
			_spec.Node.AddColumnOnce(groupmembership.FieldProjectID)
		}
		if gmq.withGroup != nil {
			_spec.Node.AddColumnOnce(groupmembership.FieldGroupID)
		}
	}
	if ps := gmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gmq *GroupMembershipQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gmq.driver.Dialect())
	t1 := builder.Table(groupmembership.Table)
	columns := gmq.ctx.Fields
	if len(columns) == 0 {
		columns = groupmembership.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gmq.sql != nil {
		selector = gmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gmq.ctx.Unique != nil && *gmq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gmq.predicates {
		p(selector)
	}
	for _, p := range gmq.order {
		p(selector)
	}
	if offset := gmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GroupMembershipGroupBy is the group-by builder for GroupMembership entities.
type GroupMembershipGroupBy struct {
	selector
	build *GroupMembershipQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gmgb *GroupMembershipGroupBy) Aggregate(fns ...AggregateFunc) *GroupMembershipGroupBy {
	gmgb.fns = append(gmgb.fns, fns...)
	return gmgb
}

// Scan applies the selector query and scans the result into the given value.
func (gmgb *GroupMembershipGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gmgb.build.ctx, "GroupBy")
	if err := gmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GroupMembershipQuery, *GroupMembershipGroupBy](ctx, gmgb.build, gmgb, gmgb.build.inters, v)
}

func (gmgb *GroupMembershipGroupBy) sqlScan(ctx context.Context, root *GroupMembershipQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gmgb.fns))
	for _, fn := range gmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gmgb.flds)+len(gmgb.fns))
		for _, f := range *gmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GroupMembershipSelect is the builder for selecting fields of GroupMembership entities.
type GroupMembershipSelect struct {
	*GroupMembershipQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gms *GroupMembershipSelect) Aggregate(fns ...AggregateFunc) *GroupMembershipSelect {
	gms.fns = append(gms.fns, fns...)
	return gms
}

// Scan applies the selector query and scans the result into the given value.
func (gms *GroupMembershipSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gms.ctx, "Select")
	if err := gms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GroupMembershipQuery, *GroupMembershipSelect](ctx, gms.GroupMembershipQuery, gms, gms.inters, v)
}

func (gms *GroupMembershipSelect) sqlScan(ctx context.Context, root *GroupMembershipQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gms.fns))
	for _, fn := range gms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
