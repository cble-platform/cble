// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cble-platform/cble-backend/engine/models"
	"github.com/cble-platform/cble-backend/ent/blueprint"
	"github.com/cble-platform/cble-backend/ent/resource"
	"github.com/cble-platform/cble-provider-grpc/pkg/provider"
	"github.com/google/uuid"
)

// ResourceCreate is the builder for creating a Resource entity.
type ResourceCreate struct {
	config
	mutation *ResourceMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *ResourceCreate) SetCreatedAt(t time.Time) *ResourceCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableCreatedAt(t *time.Time) *ResourceCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *ResourceCreate) SetUpdatedAt(t time.Time) *ResourceCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableUpdatedAt(t *time.Time) *ResourceCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetType sets the "type" field.
func (rc *ResourceCreate) SetType(r resource.Type) *ResourceCreate {
	rc.mutation.SetType(r)
	return rc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableType(r *resource.Type) *ResourceCreate {
	if r != nil {
		rc.SetType(*r)
	}
	return rc
}

// SetKey sets the "key" field.
func (rc *ResourceCreate) SetKey(s string) *ResourceCreate {
	rc.mutation.SetKey(s)
	return rc
}

// SetResourceType sets the "resource_type" field.
func (rc *ResourceCreate) SetResourceType(s string) *ResourceCreate {
	rc.mutation.SetResourceType(s)
	return rc
}

// SetFeatures sets the "features" field.
func (rc *ResourceCreate) SetFeatures(pr provider.Features) *ResourceCreate {
	rc.mutation.SetFeatures(pr)
	return rc
}

// SetNillableFeatures sets the "features" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableFeatures(pr *provider.Features) *ResourceCreate {
	if pr != nil {
		rc.SetFeatures(*pr)
	}
	return rc
}

// SetQuotaRequirements sets the "quota_requirements" field.
func (rc *ResourceCreate) SetQuotaRequirements(pr provider.QuotaRequirements) *ResourceCreate {
	rc.mutation.SetQuotaRequirements(pr)
	return rc
}

// SetNillableQuotaRequirements sets the "quota_requirements" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableQuotaRequirements(pr *provider.QuotaRequirements) *ResourceCreate {
	if pr != nil {
		rc.SetQuotaRequirements(*pr)
	}
	return rc
}

// SetObject sets the "object" field.
func (rc *ResourceCreate) SetObject(m *models.Object) *ResourceCreate {
	rc.mutation.SetObject(m)
	return rc
}

// SetID sets the "id" field.
func (rc *ResourceCreate) SetID(u uuid.UUID) *ResourceCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *ResourceCreate) SetNillableID(u *uuid.UUID) *ResourceCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// SetBlueprintID sets the "blueprint" edge to the Blueprint entity by ID.
func (rc *ResourceCreate) SetBlueprintID(id uuid.UUID) *ResourceCreate {
	rc.mutation.SetBlueprintID(id)
	return rc
}

// SetBlueprint sets the "blueprint" edge to the Blueprint entity.
func (rc *ResourceCreate) SetBlueprint(b *Blueprint) *ResourceCreate {
	return rc.SetBlueprintID(b.ID)
}

// AddDependsOnIDs adds the "depends_on" edge to the Resource entity by IDs.
func (rc *ResourceCreate) AddDependsOnIDs(ids ...uuid.UUID) *ResourceCreate {
	rc.mutation.AddDependsOnIDs(ids...)
	return rc
}

// AddDependsOn adds the "depends_on" edges to the Resource entity.
func (rc *ResourceCreate) AddDependsOn(r ...*Resource) *ResourceCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddDependsOnIDs(ids...)
}

// AddRequiredByIDs adds the "required_by" edge to the Resource entity by IDs.
func (rc *ResourceCreate) AddRequiredByIDs(ids ...uuid.UUID) *ResourceCreate {
	rc.mutation.AddRequiredByIDs(ids...)
	return rc
}

// AddRequiredBy adds the "required_by" edges to the Resource entity.
func (rc *ResourceCreate) AddRequiredBy(r ...*Resource) *ResourceCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddRequiredByIDs(ids...)
}

// Mutation returns the ResourceMutation object of the builder.
func (rc *ResourceCreate) Mutation() *ResourceMutation {
	return rc.mutation
}

// Save creates the Resource in the database.
func (rc *ResourceCreate) Save(ctx context.Context) (*Resource, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ResourceCreate) SaveX(ctx context.Context) *Resource {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ResourceCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ResourceCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ResourceCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := resource.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := resource.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.GetType(); !ok {
		v := resource.DefaultType
		rc.mutation.SetType(v)
	}
	if _, ok := rc.mutation.Features(); !ok {
		v := resource.DefaultFeatures
		rc.mutation.SetFeatures(v)
	}
	if _, ok := rc.mutation.QuotaRequirements(); !ok {
		v := resource.DefaultQuotaRequirements
		rc.mutation.SetQuotaRequirements(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := resource.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ResourceCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Resource.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Resource.updated_at"`)}
	}
	if _, ok := rc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Resource.type"`)}
	}
	if v, ok := rc.mutation.GetType(); ok {
		if err := resource.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Resource.type": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "Resource.key"`)}
	}
	if _, ok := rc.mutation.ResourceType(); !ok {
		return &ValidationError{Name: "resource_type", err: errors.New(`ent: missing required field "Resource.resource_type"`)}
	}
	if _, ok := rc.mutation.Object(); !ok {
		return &ValidationError{Name: "object", err: errors.New(`ent: missing required field "Resource.object"`)}
	}
	if _, ok := rc.mutation.BlueprintID(); !ok {
		return &ValidationError{Name: "blueprint", err: errors.New(`ent: missing required edge "Resource.blueprint"`)}
	}
	return nil
}

func (rc *ResourceCreate) sqlSave(ctx context.Context) (*Resource, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ResourceCreate) createSpec() (*Resource, *sqlgraph.CreateSpec) {
	var (
		_node = &Resource{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(resource.Table, sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(resource.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(resource.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.GetType(); ok {
		_spec.SetField(resource.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := rc.mutation.Key(); ok {
		_spec.SetField(resource.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := rc.mutation.ResourceType(); ok {
		_spec.SetField(resource.FieldResourceType, field.TypeString, value)
		_node.ResourceType = value
	}
	if value, ok := rc.mutation.Features(); ok {
		_spec.SetField(resource.FieldFeatures, field.TypeJSON, value)
		_node.Features = value
	}
	if value, ok := rc.mutation.QuotaRequirements(); ok {
		_spec.SetField(resource.FieldQuotaRequirements, field.TypeJSON, value)
		_node.QuotaRequirements = value
	}
	if value, ok := rc.mutation.Object(); ok {
		_spec.SetField(resource.FieldObject, field.TypeJSON, value)
		_node.Object = value
	}
	if nodes := rc.mutation.BlueprintIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   resource.BlueprintTable,
			Columns: []string{resource.BlueprintColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blueprint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.resource_blueprint = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.DependsOnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   resource.DependsOnTable,
			Columns: resource.DependsOnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RequiredByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   resource.RequiredByTable,
			Columns: resource.RequiredByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ResourceCreateBulk is the builder for creating many Resource entities in bulk.
type ResourceCreateBulk struct {
	config
	err      error
	builders []*ResourceCreate
}

// Save creates the Resource entities in the database.
func (rcb *ResourceCreateBulk) Save(ctx context.Context) ([]*Resource, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Resource, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ResourceCreateBulk) SaveX(ctx context.Context) []*Resource {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ResourceCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
