// Code generated by ent, DO NOT EDIT.

package resource

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/cble-platform/cble-backend/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldUpdatedAt, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldKey, v))
}

// ResourceType applies equality check predicate on the "resource_type" field. It's identical to ResourceTypeEQ.
func ResourceType(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldResourceType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldUpdatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldType, vs...))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContainsFold(FieldKey, v))
}

// ResourceTypeEQ applies the EQ predicate on the "resource_type" field.
func ResourceTypeEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEQ(FieldResourceType, v))
}

// ResourceTypeNEQ applies the NEQ predicate on the "resource_type" field.
func ResourceTypeNEQ(v string) predicate.Resource {
	return predicate.Resource(sql.FieldNEQ(FieldResourceType, v))
}

// ResourceTypeIn applies the In predicate on the "resource_type" field.
func ResourceTypeIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldIn(FieldResourceType, vs...))
}

// ResourceTypeNotIn applies the NotIn predicate on the "resource_type" field.
func ResourceTypeNotIn(vs ...string) predicate.Resource {
	return predicate.Resource(sql.FieldNotIn(FieldResourceType, vs...))
}

// ResourceTypeGT applies the GT predicate on the "resource_type" field.
func ResourceTypeGT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGT(FieldResourceType, v))
}

// ResourceTypeGTE applies the GTE predicate on the "resource_type" field.
func ResourceTypeGTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldGTE(FieldResourceType, v))
}

// ResourceTypeLT applies the LT predicate on the "resource_type" field.
func ResourceTypeLT(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLT(FieldResourceType, v))
}

// ResourceTypeLTE applies the LTE predicate on the "resource_type" field.
func ResourceTypeLTE(v string) predicate.Resource {
	return predicate.Resource(sql.FieldLTE(FieldResourceType, v))
}

// ResourceTypeContains applies the Contains predicate on the "resource_type" field.
func ResourceTypeContains(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContains(FieldResourceType, v))
}

// ResourceTypeHasPrefix applies the HasPrefix predicate on the "resource_type" field.
func ResourceTypeHasPrefix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasPrefix(FieldResourceType, v))
}

// ResourceTypeHasSuffix applies the HasSuffix predicate on the "resource_type" field.
func ResourceTypeHasSuffix(v string) predicate.Resource {
	return predicate.Resource(sql.FieldHasSuffix(FieldResourceType, v))
}

// ResourceTypeEqualFold applies the EqualFold predicate on the "resource_type" field.
func ResourceTypeEqualFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldEqualFold(FieldResourceType, v))
}

// ResourceTypeContainsFold applies the ContainsFold predicate on the "resource_type" field.
func ResourceTypeContainsFold(v string) predicate.Resource {
	return predicate.Resource(sql.FieldContainsFold(FieldResourceType, v))
}

// FeaturesIsNil applies the IsNil predicate on the "features" field.
func FeaturesIsNil() predicate.Resource {
	return predicate.Resource(sql.FieldIsNull(FieldFeatures))
}

// FeaturesNotNil applies the NotNil predicate on the "features" field.
func FeaturesNotNil() predicate.Resource {
	return predicate.Resource(sql.FieldNotNull(FieldFeatures))
}

// QuotaRequirementsIsNil applies the IsNil predicate on the "quota_requirements" field.
func QuotaRequirementsIsNil() predicate.Resource {
	return predicate.Resource(sql.FieldIsNull(FieldQuotaRequirements))
}

// QuotaRequirementsNotNil applies the NotNil predicate on the "quota_requirements" field.
func QuotaRequirementsNotNil() predicate.Resource {
	return predicate.Resource(sql.FieldNotNull(FieldQuotaRequirements))
}

// HasBlueprint applies the HasEdge predicate on the "blueprint" edge.
func HasBlueprint() predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BlueprintTable, BlueprintColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlueprintWith applies the HasEdge predicate on the "blueprint" edge with a given conditions (other predicates).
func HasBlueprintWith(preds ...predicate.Blueprint) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := newBlueprintStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDependsOn applies the HasEdge predicate on the "depends_on" edge.
func HasDependsOn() predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DependsOnTable, DependsOnPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDependsOnWith applies the HasEdge predicate on the "depends_on" edge with a given conditions (other predicates).
func HasDependsOnWith(preds ...predicate.Resource) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := newDependsOnStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRequiredBy applies the HasEdge predicate on the "required_by" edge.
func HasRequiredBy() predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RequiredByTable, RequiredByPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequiredByWith applies the HasEdge predicate on the "required_by" edge with a given conditions (other predicates).
func HasRequiredByWith(preds ...predicate.Resource) predicate.Resource {
	return predicate.Resource(func(s *sql.Selector) {
		step := newRequiredByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Resource) predicate.Resource {
	return predicate.Resource(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Resource) predicate.Resource {
	return predicate.Resource(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Resource) predicate.Resource {
	return predicate.Resource(sql.NotPredicates(p))
}
