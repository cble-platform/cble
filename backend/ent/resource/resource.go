// Code generated by ent, DO NOT EDIT.

package resource

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/cble-platform/cble-provider-grpc/pkg/provider"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the resource type in the database.
	Label = "resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldResourceType holds the string denoting the resource_type field in the database.
	FieldResourceType = "resource_type"
	// FieldFeatures holds the string denoting the features field in the database.
	FieldFeatures = "features"
	// FieldQuotaRequirements holds the string denoting the quota_requirements field in the database.
	FieldQuotaRequirements = "quota_requirements"
	// FieldObject holds the string denoting the object field in the database.
	FieldObject = "object"
	// EdgeBlueprint holds the string denoting the blueprint edge name in mutations.
	EdgeBlueprint = "blueprint"
	// EdgeDependsOn holds the string denoting the depends_on edge name in mutations.
	EdgeDependsOn = "depends_on"
	// EdgeRequiredBy holds the string denoting the required_by edge name in mutations.
	EdgeRequiredBy = "required_by"
	// Table holds the table name of the resource in the database.
	Table = "resources"
	// BlueprintTable is the table that holds the blueprint relation/edge.
	BlueprintTable = "resources"
	// BlueprintInverseTable is the table name for the Blueprint entity.
	// It exists in this package in order to avoid circular dependency with the "blueprint" package.
	BlueprintInverseTable = "blueprints"
	// BlueprintColumn is the table column denoting the blueprint relation/edge.
	BlueprintColumn = "resource_blueprint"
	// DependsOnTable is the table that holds the depends_on relation/edge. The primary key declared below.
	DependsOnTable = "resource_required_by"
	// RequiredByTable is the table that holds the required_by relation/edge. The primary key declared below.
	RequiredByTable = "resource_required_by"
)

// Columns holds all SQL columns for resource fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldType,
	FieldKey,
	FieldResourceType,
	FieldFeatures,
	FieldQuotaRequirements,
	FieldObject,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"resource_blueprint",
}

var (
	// DependsOnPrimaryKey and DependsOnColumn2 are the table columns denoting the
	// primary key for the depends_on relation (M2M).
	DependsOnPrimaryKey = []string{"resource_id", "depends_on_id"}
	// RequiredByPrimaryKey and RequiredByColumn2 are the table columns denoting the
	// primary key for the required_by relation (M2M).
	RequiredByPrimaryKey = []string{"resource_id", "depends_on_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultFeatures holds the default value on creation for the "features" field.
	DefaultFeatures provider.Features
	// DefaultQuotaRequirements holds the default value on creation for the "quota_requirements" field.
	DefaultQuotaRequirements provider.QuotaRequirements
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// TypeResource is the default value of the Type enum.
const DefaultType = TypeResource

// Type values.
const (
	TypeResource Type = "resource"
	TypeData     Type = "data"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeResource, TypeData:
		return nil
	default:
		return fmt.Errorf("resource: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Resource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByResourceType orders the results by the resource_type field.
func ByResourceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceType, opts...).ToFunc()
}

// ByBlueprintField orders the results by blueprint field.
func ByBlueprintField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlueprintStep(), sql.OrderByField(field, opts...))
	}
}

// ByDependsOnCount orders the results by depends_on count.
func ByDependsOnCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDependsOnStep(), opts...)
	}
}

// ByDependsOn orders the results by depends_on terms.
func ByDependsOn(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependsOnStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRequiredByCount orders the results by required_by count.
func ByRequiredByCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRequiredByStep(), opts...)
	}
}

// ByRequiredBy orders the results by required_by terms.
func ByRequiredBy(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequiredByStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBlueprintStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlueprintInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BlueprintTable, BlueprintColumn),
	)
}
func newDependsOnStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DependsOnTable, DependsOnPrimaryKey...),
	)
}
func newRequiredByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RequiredByTable, RequiredByPrimaryKey...),
	)
}
