// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cble-platform/cble-backend/ent/grantedpermission"
	"github.com/cble-platform/cble-backend/ent/group"
	"github.com/cble-platform/cble-backend/ent/user"
	"github.com/cble-platform/cble-backend/permission/actions"
	"github.com/google/uuid"
)

// GrantedPermission is the model entity for the GrantedPermission schema.
type GrantedPermission struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The type of subject this permission applies to
	SubjectType grantedpermission.SubjectType `json:"subject_type,omitempty"`
	// The ID of subject this permission applies to
	SubjectID uuid.UUID `json:"subject_id,omitempty"`
	// The type of object this permission applies to
	ObjectType grantedpermission.ObjectType `json:"object_type,omitempty"`
	// The ID of object this permission applies to (or `uuid.Nil` for wildcard)
	ObjectID uuid.UUID `json:"object_id,omitempty"`
	// The action associated with the object
	Action actions.PermissionAction `json:"action,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GrantedPermissionQuery when eager-loading is set.
	Edges                    GrantedPermissionEdges `json:"edges"`
	granted_permission_user  *uuid.UUID
	granted_permission_group *uuid.UUID
	selectValues             sql.SelectValues
}

// GrantedPermissionEdges holds the relations/edges for other nodes in the graph.
type GrantedPermissionEdges struct {
	// The subject user (if of type user)
	User *User `json:"user,omitempty"`
	// The subject group (if of type user)
	Group *Group `json:"group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GrantedPermissionEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GrantedPermissionEdges) GroupOrErr() (*Group, error) {
	if e.loadedTypes[1] {
		if e.Group == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: group.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GrantedPermission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case grantedpermission.FieldSubjectType, grantedpermission.FieldObjectType, grantedpermission.FieldAction:
			values[i] = new(sql.NullString)
		case grantedpermission.FieldCreatedAt, grantedpermission.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case grantedpermission.FieldID, grantedpermission.FieldSubjectID, grantedpermission.FieldObjectID:
			values[i] = new(uuid.UUID)
		case grantedpermission.ForeignKeys[0]: // granted_permission_user
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case grantedpermission.ForeignKeys[1]: // granted_permission_group
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GrantedPermission fields.
func (gp *GrantedPermission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case grantedpermission.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gp.ID = *value
			}
		case grantedpermission.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gp.CreatedAt = value.Time
			}
		case grantedpermission.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gp.UpdatedAt = value.Time
			}
		case grantedpermission.FieldSubjectType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_type", values[i])
			} else if value.Valid {
				gp.SubjectType = grantedpermission.SubjectType(value.String)
			}
		case grantedpermission.FieldSubjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field subject_id", values[i])
			} else if value != nil {
				gp.SubjectID = *value
			}
		case grantedpermission.FieldObjectType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field object_type", values[i])
			} else if value.Valid {
				gp.ObjectType = grantedpermission.ObjectType(value.String)
			}
		case grantedpermission.FieldObjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field object_id", values[i])
			} else if value != nil {
				gp.ObjectID = *value
			}
		case grantedpermission.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				gp.Action = actions.PermissionAction(value.String)
			}
		case grantedpermission.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field granted_permission_user", values[i])
			} else if value.Valid {
				gp.granted_permission_user = new(uuid.UUID)
				*gp.granted_permission_user = *value.S.(*uuid.UUID)
			}
		case grantedpermission.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field granted_permission_group", values[i])
			} else if value.Valid {
				gp.granted_permission_group = new(uuid.UUID)
				*gp.granted_permission_group = *value.S.(*uuid.UUID)
			}
		default:
			gp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GrantedPermission.
// This includes values selected through modifiers, order, etc.
func (gp *GrantedPermission) Value(name string) (ent.Value, error) {
	return gp.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the GrantedPermission entity.
func (gp *GrantedPermission) QueryUser() *UserQuery {
	return NewGrantedPermissionClient(gp.config).QueryUser(gp)
}

// QueryGroup queries the "group" edge of the GrantedPermission entity.
func (gp *GrantedPermission) QueryGroup() *GroupQuery {
	return NewGrantedPermissionClient(gp.config).QueryGroup(gp)
}

// Update returns a builder for updating this GrantedPermission.
// Note that you need to call GrantedPermission.Unwrap() before calling this method if this GrantedPermission
// was returned from a transaction, and the transaction was committed or rolled back.
func (gp *GrantedPermission) Update() *GrantedPermissionUpdateOne {
	return NewGrantedPermissionClient(gp.config).UpdateOne(gp)
}

// Unwrap unwraps the GrantedPermission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gp *GrantedPermission) Unwrap() *GrantedPermission {
	_tx, ok := gp.config.driver.(*txDriver)
	if !ok {
		panic("ent: GrantedPermission is not a transactional entity")
	}
	gp.config.driver = _tx.drv
	return gp
}

// String implements the fmt.Stringer.
func (gp *GrantedPermission) String() string {
	var builder strings.Builder
	builder.WriteString("GrantedPermission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(gp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(gp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("subject_type=")
	builder.WriteString(fmt.Sprintf("%v", gp.SubjectType))
	builder.WriteString(", ")
	builder.WriteString("subject_id=")
	builder.WriteString(fmt.Sprintf("%v", gp.SubjectID))
	builder.WriteString(", ")
	builder.WriteString("object_type=")
	builder.WriteString(fmt.Sprintf("%v", gp.ObjectType))
	builder.WriteString(", ")
	builder.WriteString("object_id=")
	builder.WriteString(fmt.Sprintf("%v", gp.ObjectID))
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(fmt.Sprintf("%v", gp.Action))
	builder.WriteByte(')')
	return builder.String()
}

// GrantedPermissions is a parsable slice of GrantedPermission.
type GrantedPermissions []*GrantedPermission
