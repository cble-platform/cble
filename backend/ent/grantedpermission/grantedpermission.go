// Code generated by ent, DO NOT EDIT.

package grantedpermission

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/cble-platform/cble/backend/permission/actions"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the grantedpermission type in the database.
	Label = "granted_permission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldSubjectType holds the string denoting the subject_type field in the database.
	FieldSubjectType = "subject_type"
	// FieldSubjectID holds the string denoting the subject_id field in the database.
	FieldSubjectID = "subject_id"
	// FieldObjectType holds the string denoting the object_type field in the database.
	FieldObjectType = "object_type"
	// FieldObjectID holds the string denoting the object_id field in the database.
	FieldObjectID = "object_id"
	// FieldAction holds the string denoting the action field in the database.
	FieldAction = "action"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeGroup holds the string denoting the group edge name in mutations.
	EdgeGroup = "group"
	// Table holds the table name of the grantedpermission in the database.
	Table = "granted_permissions"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "granted_permissions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "granted_permission_user"
	// GroupTable is the table that holds the group relation/edge.
	GroupTable = "granted_permissions"
	// GroupInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupInverseTable = "groups"
	// GroupColumn is the table column denoting the group relation/edge.
	GroupColumn = "granted_permission_group"
)

// Columns holds all SQL columns for grantedpermission fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldSubjectType,
	FieldSubjectID,
	FieldObjectType,
	FieldObjectID,
	FieldAction,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "granted_permissions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"granted_permission_user",
	"granted_permission_group",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// SubjectType defines the type for the "subject_type" enum field.
type SubjectType string

// SubjectType values.
const (
	SubjectTypeUser  SubjectType = "user"
	SubjectTypeGroup SubjectType = "group"
)

func (st SubjectType) String() string {
	return string(st)
}

// SubjectTypeValidator is a validator for the "subject_type" field enum values. It is called by the builders before save.
func SubjectTypeValidator(st SubjectType) error {
	switch st {
	case SubjectTypeUser, SubjectTypeGroup:
		return nil
	default:
		return fmt.Errorf("grantedpermission: invalid enum value for subject_type field: %q", st)
	}
}

// ObjectType defines the type for the "object_type" enum field.
type ObjectType string

// ObjectType values.
const (
	ObjectTypeBlueprint  ObjectType = "blueprint"
	ObjectTypeDeployment ObjectType = "deployment"
	ObjectTypeGroup      ObjectType = "group"
	ObjectTypePermission ObjectType = "permission"
	ObjectTypeProject    ObjectType = "project"
	ObjectTypeProvider   ObjectType = "provider"
	ObjectTypeUser       ObjectType = "user"
)

func (ot ObjectType) String() string {
	return string(ot)
}

// ObjectTypeValidator is a validator for the "object_type" field enum values. It is called by the builders before save.
func ObjectTypeValidator(ot ObjectType) error {
	switch ot {
	case ObjectTypeBlueprint, ObjectTypeDeployment, ObjectTypeGroup, ObjectTypePermission, ObjectTypeProject, ObjectTypeProvider, ObjectTypeUser:
		return nil
	default:
		return fmt.Errorf("grantedpermission: invalid enum value for object_type field: %q", ot)
	}
}

// ActionValidator is a validator for the "action" field enum values. It is called by the builders before save.
func ActionValidator(a actions.PermissionAction) error {
	switch a {
	case "group_list", "group_create", "group_get", "group_update", "group_delete", "permission_list", "permission_get", "permission_grant", "permission_revoke", "project_list", "project_create", "project_update", "project_delete", "project_update_membership", "provider_list", "provider_create", "provider_get", "provider_update", "provider_delete", "provider_load", "provider_unload", "provider_configure", "user_list", "user_create", "user_get", "user_update", "user_delete", "unknown":
		return nil
	default:
		return fmt.Errorf("grantedpermission: invalid enum value for action field: %q", a)
	}
}

// OrderOption defines the ordering options for the GrantedPermission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySubjectType orders the results by the subject_type field.
func BySubjectType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectType, opts...).ToFunc()
}

// BySubjectID orders the results by the subject_id field.
func BySubjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubjectID, opts...).ToFunc()
}

// ByObjectType orders the results by the object_type field.
func ByObjectType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldObjectType, opts...).ToFunc()
}

// ByObjectID orders the results by the object_id field.
func ByObjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldObjectID, opts...).ToFunc()
}

// ByAction orders the results by the action field.
func ByAction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAction, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByGroupField orders the results by group field.
func ByGroupField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, GroupTable, GroupColumn),
	)
}
