// Code generated by ent, DO NOT EDIT.

package grantedpermission

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/cble-platform/cble-backend/ent/predicate"
	"github.com/cble-platform/cble-backend/permission/actions"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldEQ(FieldUpdatedAt, v))
}

// SubjectID applies equality check predicate on the "subject_id" field. It's identical to SubjectIDEQ.
func SubjectID(v uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldEQ(FieldSubjectID, v))
}

// ObjectID applies equality check predicate on the "object_id" field. It's identical to ObjectIDEQ.
func ObjectID(v uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldEQ(FieldObjectID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldLTE(FieldUpdatedAt, v))
}

// SubjectTypeEQ applies the EQ predicate on the "subject_type" field.
func SubjectTypeEQ(v SubjectType) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldEQ(FieldSubjectType, v))
}

// SubjectTypeNEQ applies the NEQ predicate on the "subject_type" field.
func SubjectTypeNEQ(v SubjectType) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldNEQ(FieldSubjectType, v))
}

// SubjectTypeIn applies the In predicate on the "subject_type" field.
func SubjectTypeIn(vs ...SubjectType) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldIn(FieldSubjectType, vs...))
}

// SubjectTypeNotIn applies the NotIn predicate on the "subject_type" field.
func SubjectTypeNotIn(vs ...SubjectType) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldNotIn(FieldSubjectType, vs...))
}

// SubjectIDEQ applies the EQ predicate on the "subject_id" field.
func SubjectIDEQ(v uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldEQ(FieldSubjectID, v))
}

// SubjectIDNEQ applies the NEQ predicate on the "subject_id" field.
func SubjectIDNEQ(v uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldNEQ(FieldSubjectID, v))
}

// SubjectIDIn applies the In predicate on the "subject_id" field.
func SubjectIDIn(vs ...uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldIn(FieldSubjectID, vs...))
}

// SubjectIDNotIn applies the NotIn predicate on the "subject_id" field.
func SubjectIDNotIn(vs ...uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldNotIn(FieldSubjectID, vs...))
}

// SubjectIDGT applies the GT predicate on the "subject_id" field.
func SubjectIDGT(v uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldGT(FieldSubjectID, v))
}

// SubjectIDGTE applies the GTE predicate on the "subject_id" field.
func SubjectIDGTE(v uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldGTE(FieldSubjectID, v))
}

// SubjectIDLT applies the LT predicate on the "subject_id" field.
func SubjectIDLT(v uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldLT(FieldSubjectID, v))
}

// SubjectIDLTE applies the LTE predicate on the "subject_id" field.
func SubjectIDLTE(v uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldLTE(FieldSubjectID, v))
}

// ObjectTypeEQ applies the EQ predicate on the "object_type" field.
func ObjectTypeEQ(v ObjectType) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldEQ(FieldObjectType, v))
}

// ObjectTypeNEQ applies the NEQ predicate on the "object_type" field.
func ObjectTypeNEQ(v ObjectType) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldNEQ(FieldObjectType, v))
}

// ObjectTypeIn applies the In predicate on the "object_type" field.
func ObjectTypeIn(vs ...ObjectType) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldIn(FieldObjectType, vs...))
}

// ObjectTypeNotIn applies the NotIn predicate on the "object_type" field.
func ObjectTypeNotIn(vs ...ObjectType) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldNotIn(FieldObjectType, vs...))
}

// ObjectIDEQ applies the EQ predicate on the "object_id" field.
func ObjectIDEQ(v uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldEQ(FieldObjectID, v))
}

// ObjectIDNEQ applies the NEQ predicate on the "object_id" field.
func ObjectIDNEQ(v uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldNEQ(FieldObjectID, v))
}

// ObjectIDIn applies the In predicate on the "object_id" field.
func ObjectIDIn(vs ...uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldIn(FieldObjectID, vs...))
}

// ObjectIDNotIn applies the NotIn predicate on the "object_id" field.
func ObjectIDNotIn(vs ...uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldNotIn(FieldObjectID, vs...))
}

// ObjectIDGT applies the GT predicate on the "object_id" field.
func ObjectIDGT(v uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldGT(FieldObjectID, v))
}

// ObjectIDGTE applies the GTE predicate on the "object_id" field.
func ObjectIDGTE(v uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldGTE(FieldObjectID, v))
}

// ObjectIDLT applies the LT predicate on the "object_id" field.
func ObjectIDLT(v uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldLT(FieldObjectID, v))
}

// ObjectIDLTE applies the LTE predicate on the "object_id" field.
func ObjectIDLTE(v uuid.UUID) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.FieldLTE(FieldObjectID, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v actions.PermissionAction) predicate.GrantedPermission {
	vc := v
	return predicate.GrantedPermission(sql.FieldEQ(FieldAction, vc))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v actions.PermissionAction) predicate.GrantedPermission {
	vc := v
	return predicate.GrantedPermission(sql.FieldNEQ(FieldAction, vc))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...actions.PermissionAction) predicate.GrantedPermission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GrantedPermission(sql.FieldIn(FieldAction, v...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...actions.PermissionAction) predicate.GrantedPermission {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GrantedPermission(sql.FieldNotIn(FieldAction, v...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.GrantedPermission {
	return predicate.GrantedPermission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.GrantedPermission {
	return predicate.GrantedPermission(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.GrantedPermission {
	return predicate.GrantedPermission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.Group) predicate.GrantedPermission {
	return predicate.GrantedPermission(func(s *sql.Selector) {
		step := newGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GrantedPermission) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GrantedPermission) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GrantedPermission) predicate.GrantedPermission {
	return predicate.GrantedPermission(sql.NotPredicates(p))
}
