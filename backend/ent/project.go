// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cble-platform/cble/backend/ent/project"
	"github.com/google/uuid"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The name of the project
	Name string `json:"name,omitempty"`
	// The quota for number of CPU cores
	QuotaCPU int `json:"quota_cpu,omitempty"`
	// The current usage for number of CPU cores
	UsageCPU int `json:"usage_cpu,omitempty"`
	// The quota for total RAM usage (MiB)
	QuotaRAM int `json:"quota_ram,omitempty"`
	// The current usage for total RAM usage (MiB)
	UsageRAM int `json:"usage_ram,omitempty"`
	// The quota for total disk usage (MiB)
	QuotaDisk int `json:"quota_disk,omitempty"`
	// The current usage for total disk usage (MiB)
	UsageDisk int `json:"usage_disk,omitempty"`
	// The quota for number of networks
	QuotaNetwork int `json:"quota_network,omitempty"`
	// The current usage for number of networks
	UsageNetwork int `json:"usage_network,omitempty"`
	// The quota for number of routers
	QuotaRouter int `json:"quota_router,omitempty"`
	// The current usage for number of routers
	UsageRouter int `json:"usage_router,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges        ProjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// Users who have access to this project
	Members []*User `json:"members,omitempty"`
	// Groups who have access to this project
	GroupMembers []*Group `json:"group_members,omitempty"`
	// Blueprints which belong to this project
	Blueprints []*Blueprint `json:"blueprints,omitempty"`
	// Deployments which belong to this project
	Deployments []*Deployment `json:"deployments,omitempty"`
	// Memberships holds the value of the memberships edge.
	Memberships []*Membership `json:"memberships,omitempty"`
	// GroupMemberships holds the value of the group_memberships edge.
	GroupMemberships []*GroupMembership `json:"group_memberships,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) MembersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// GroupMembersOrErr returns the GroupMembers value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) GroupMembersOrErr() ([]*Group, error) {
	if e.loadedTypes[1] {
		return e.GroupMembers, nil
	}
	return nil, &NotLoadedError{edge: "group_members"}
}

// BlueprintsOrErr returns the Blueprints value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) BlueprintsOrErr() ([]*Blueprint, error) {
	if e.loadedTypes[2] {
		return e.Blueprints, nil
	}
	return nil, &NotLoadedError{edge: "blueprints"}
}

// DeploymentsOrErr returns the Deployments value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) DeploymentsOrErr() ([]*Deployment, error) {
	if e.loadedTypes[3] {
		return e.Deployments, nil
	}
	return nil, &NotLoadedError{edge: "deployments"}
}

// MembershipsOrErr returns the Memberships value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) MembershipsOrErr() ([]*Membership, error) {
	if e.loadedTypes[4] {
		return e.Memberships, nil
	}
	return nil, &NotLoadedError{edge: "memberships"}
}

// GroupMembershipsOrErr returns the GroupMemberships value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) GroupMembershipsOrErr() ([]*GroupMembership, error) {
	if e.loadedTypes[5] {
		return e.GroupMemberships, nil
	}
	return nil, &NotLoadedError{edge: "group_memberships"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldQuotaCPU, project.FieldUsageCPU, project.FieldQuotaRAM, project.FieldUsageRAM, project.FieldQuotaDisk, project.FieldUsageDisk, project.FieldQuotaNetwork, project.FieldUsageNetwork, project.FieldQuotaRouter, project.FieldUsageRouter:
			values[i] = new(sql.NullInt64)
		case project.FieldName:
			values[i] = new(sql.NullString)
		case project.FieldCreatedAt, project.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case project.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case project.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case project.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case project.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case project.FieldQuotaCPU:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quota_cpu", values[i])
			} else if value.Valid {
				pr.QuotaCPU = int(value.Int64)
			}
		case project.FieldUsageCPU:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage_cpu", values[i])
			} else if value.Valid {
				pr.UsageCPU = int(value.Int64)
			}
		case project.FieldQuotaRAM:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quota_ram", values[i])
			} else if value.Valid {
				pr.QuotaRAM = int(value.Int64)
			}
		case project.FieldUsageRAM:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage_ram", values[i])
			} else if value.Valid {
				pr.UsageRAM = int(value.Int64)
			}
		case project.FieldQuotaDisk:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quota_disk", values[i])
			} else if value.Valid {
				pr.QuotaDisk = int(value.Int64)
			}
		case project.FieldUsageDisk:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage_disk", values[i])
			} else if value.Valid {
				pr.UsageDisk = int(value.Int64)
			}
		case project.FieldQuotaNetwork:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quota_network", values[i])
			} else if value.Valid {
				pr.QuotaNetwork = int(value.Int64)
			}
		case project.FieldUsageNetwork:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage_network", values[i])
			} else if value.Valid {
				pr.UsageNetwork = int(value.Int64)
			}
		case project.FieldQuotaRouter:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quota_router", values[i])
			} else if value.Valid {
				pr.QuotaRouter = int(value.Int64)
			}
		case project.FieldUsageRouter:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage_router", values[i])
			} else if value.Valid {
				pr.UsageRouter = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Project.
// This includes values selected through modifiers, order, etc.
func (pr *Project) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryMembers queries the "members" edge of the Project entity.
func (pr *Project) QueryMembers() *UserQuery {
	return NewProjectClient(pr.config).QueryMembers(pr)
}

// QueryGroupMembers queries the "group_members" edge of the Project entity.
func (pr *Project) QueryGroupMembers() *GroupQuery {
	return NewProjectClient(pr.config).QueryGroupMembers(pr)
}

// QueryBlueprints queries the "blueprints" edge of the Project entity.
func (pr *Project) QueryBlueprints() *BlueprintQuery {
	return NewProjectClient(pr.config).QueryBlueprints(pr)
}

// QueryDeployments queries the "deployments" edge of the Project entity.
func (pr *Project) QueryDeployments() *DeploymentQuery {
	return NewProjectClient(pr.config).QueryDeployments(pr)
}

// QueryMemberships queries the "memberships" edge of the Project entity.
func (pr *Project) QueryMemberships() *MembershipQuery {
	return NewProjectClient(pr.config).QueryMemberships(pr)
}

// QueryGroupMemberships queries the "group_memberships" edge of the Project entity.
func (pr *Project) QueryGroupMemberships() *GroupMembershipQuery {
	return NewProjectClient(pr.config).QueryGroupMemberships(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return NewProjectClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("quota_cpu=")
	builder.WriteString(fmt.Sprintf("%v", pr.QuotaCPU))
	builder.WriteString(", ")
	builder.WriteString("usage_cpu=")
	builder.WriteString(fmt.Sprintf("%v", pr.UsageCPU))
	builder.WriteString(", ")
	builder.WriteString("quota_ram=")
	builder.WriteString(fmt.Sprintf("%v", pr.QuotaRAM))
	builder.WriteString(", ")
	builder.WriteString("usage_ram=")
	builder.WriteString(fmt.Sprintf("%v", pr.UsageRAM))
	builder.WriteString(", ")
	builder.WriteString("quota_disk=")
	builder.WriteString(fmt.Sprintf("%v", pr.QuotaDisk))
	builder.WriteString(", ")
	builder.WriteString("usage_disk=")
	builder.WriteString(fmt.Sprintf("%v", pr.UsageDisk))
	builder.WriteString(", ")
	builder.WriteString("quota_network=")
	builder.WriteString(fmt.Sprintf("%v", pr.QuotaNetwork))
	builder.WriteString(", ")
	builder.WriteString("usage_network=")
	builder.WriteString(fmt.Sprintf("%v", pr.UsageNetwork))
	builder.WriteString(", ")
	builder.WriteString("quota_router=")
	builder.WriteString(fmt.Sprintf("%v", pr.QuotaRouter))
	builder.WriteString(", ")
	builder.WriteString("usage_router=")
	builder.WriteString(fmt.Sprintf("%v", pr.UsageRouter))
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project
