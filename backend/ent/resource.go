// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cble-platform/cble-provider-grpc/pkg/provider"
	"github.com/cble-platform/cble/backend/engine/models"
	"github.com/cble-platform/cble/backend/ent/blueprint"
	"github.com/cble-platform/cble/backend/ent/resource"
	"github.com/google/uuid"
)

// Resource is the model entity for the Resource schema.
type Resource struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Type holds the value of the "type" field.
	Type resource.Type `json:"type,omitempty"`
	// The resource/data key from the blueprint
	Key string `json:"key,omitempty"`
	// The resource/data string from the blueprint
	ResourceType string `json:"resource_type,omitempty"`
	// The features supported by this resource
	Features provider.Features `json:"features,omitempty"`
	// The quota space required by this resource
	QuotaRequirements provider.QuotaRequirements `json:"quota_requirements,omitempty"`
	// The entire resource/data object from the blueprint
	Object *models.Object `json:"object,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResourceQuery when eager-loading is set.
	Edges              ResourceEdges `json:"edges"`
	resource_blueprint *uuid.UUID
	selectValues       sql.SelectValues
}

// ResourceEdges holds the relations/edges for other nodes in the graph.
type ResourceEdges struct {
	// Blueprint containing this resource
	Blueprint *Blueprint `json:"blueprint,omitempty"`
	// Stores all dependencies of this resource
	DependsOn []*Resource `json:"depends_on,omitempty"`
	// Stores all dependents of this resource
	RequiredBy []*Resource `json:"required_by,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// BlueprintOrErr returns the Blueprint value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResourceEdges) BlueprintOrErr() (*Blueprint, error) {
	if e.loadedTypes[0] {
		if e.Blueprint == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: blueprint.Label}
		}
		return e.Blueprint, nil
	}
	return nil, &NotLoadedError{edge: "blueprint"}
}

// DependsOnOrErr returns the DependsOn value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceEdges) DependsOnOrErr() ([]*Resource, error) {
	if e.loadedTypes[1] {
		return e.DependsOn, nil
	}
	return nil, &NotLoadedError{edge: "depends_on"}
}

// RequiredByOrErr returns the RequiredBy value or an error if the edge
// was not loaded in eager-loading.
func (e ResourceEdges) RequiredByOrErr() ([]*Resource, error) {
	if e.loadedTypes[2] {
		return e.RequiredBy, nil
	}
	return nil, &NotLoadedError{edge: "required_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Resource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case resource.FieldFeatures, resource.FieldQuotaRequirements, resource.FieldObject:
			values[i] = new([]byte)
		case resource.FieldType, resource.FieldKey, resource.FieldResourceType:
			values[i] = new(sql.NullString)
		case resource.FieldCreatedAt, resource.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case resource.FieldID:
			values[i] = new(uuid.UUID)
		case resource.ForeignKeys[0]: // resource_blueprint
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Resource fields.
func (r *Resource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resource.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case resource.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case resource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case resource.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = resource.Type(value.String)
			}
		case resource.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				r.Key = value.String
			}
		case resource.FieldResourceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_type", values[i])
			} else if value.Valid {
				r.ResourceType = value.String
			}
		case resource.FieldFeatures:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field features", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Features); err != nil {
					return fmt.Errorf("unmarshal field features: %w", err)
				}
			}
		case resource.FieldQuotaRequirements:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field quota_requirements", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.QuotaRequirements); err != nil {
					return fmt.Errorf("unmarshal field quota_requirements: %w", err)
				}
			}
		case resource.FieldObject:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field object", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Object); err != nil {
					return fmt.Errorf("unmarshal field object: %w", err)
				}
			}
		case resource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field resource_blueprint", values[i])
			} else if value.Valid {
				r.resource_blueprint = new(uuid.UUID)
				*r.resource_blueprint = *value.S.(*uuid.UUID)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Resource.
// This includes values selected through modifiers, order, etc.
func (r *Resource) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryBlueprint queries the "blueprint" edge of the Resource entity.
func (r *Resource) QueryBlueprint() *BlueprintQuery {
	return NewResourceClient(r.config).QueryBlueprint(r)
}

// QueryDependsOn queries the "depends_on" edge of the Resource entity.
func (r *Resource) QueryDependsOn() *ResourceQuery {
	return NewResourceClient(r.config).QueryDependsOn(r)
}

// QueryRequiredBy queries the "required_by" edge of the Resource entity.
func (r *Resource) QueryRequiredBy() *ResourceQuery {
	return NewResourceClient(r.config).QueryRequiredBy(r)
}

// Update returns a builder for updating this Resource.
// Note that you need to call Resource.Unwrap() before calling this method if this Resource
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Resource) Update() *ResourceUpdateOne {
	return NewResourceClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Resource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Resource) Unwrap() *Resource {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Resource is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Resource) String() string {
	var builder strings.Builder
	builder.WriteString("Resource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", r.Type))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(r.Key)
	builder.WriteString(", ")
	builder.WriteString("resource_type=")
	builder.WriteString(r.ResourceType)
	builder.WriteString(", ")
	builder.WriteString("features=")
	builder.WriteString(fmt.Sprintf("%v", r.Features))
	builder.WriteString(", ")
	builder.WriteString("quota_requirements=")
	builder.WriteString(fmt.Sprintf("%v", r.QuotaRequirements))
	builder.WriteString(", ")
	builder.WriteString("object=")
	builder.WriteString(fmt.Sprintf("%v", r.Object))
	builder.WriteByte(')')
	return builder.String()
}

// Resources is a parsable slice of Resource.
type Resources []*Resource
