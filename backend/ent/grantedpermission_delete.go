// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cble-platform/cble-backend/ent/grantedpermission"
	"github.com/cble-platform/cble-backend/ent/predicate"
)

// GrantedPermissionDelete is the builder for deleting a GrantedPermission entity.
type GrantedPermissionDelete struct {
	config
	hooks    []Hook
	mutation *GrantedPermissionMutation
}

// Where appends a list predicates to the GrantedPermissionDelete builder.
func (gpd *GrantedPermissionDelete) Where(ps ...predicate.GrantedPermission) *GrantedPermissionDelete {
	gpd.mutation.Where(ps...)
	return gpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gpd *GrantedPermissionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gpd.sqlExec, gpd.mutation, gpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gpd *GrantedPermissionDelete) ExecX(ctx context.Context) int {
	n, err := gpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gpd *GrantedPermissionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(grantedpermission.Table, sqlgraph.NewFieldSpec(grantedpermission.FieldID, field.TypeUUID))
	if ps := gpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gpd.mutation.done = true
	return affected, err
}

// GrantedPermissionDeleteOne is the builder for deleting a single GrantedPermission entity.
type GrantedPermissionDeleteOne struct {
	gpd *GrantedPermissionDelete
}

// Where appends a list predicates to the GrantedPermissionDelete builder.
func (gpdo *GrantedPermissionDeleteOne) Where(ps ...predicate.GrantedPermission) *GrantedPermissionDeleteOne {
	gpdo.gpd.mutation.Where(ps...)
	return gpdo
}

// Exec executes the deletion query.
func (gpdo *GrantedPermissionDeleteOne) Exec(ctx context.Context) error {
	n, err := gpdo.gpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{grantedpermission.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gpdo *GrantedPermissionDeleteOne) ExecX(ctx context.Context) {
	if err := gpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
