// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cble-platform/cble/backend/ent/grantedpermission"
	"github.com/cble-platform/cble/backend/ent/group"
	"github.com/cble-platform/cble/backend/ent/user"
	"github.com/cble-platform/cble/backend/permission/actions"
	"github.com/google/uuid"
)

// GrantedPermissionCreate is the builder for creating a GrantedPermission entity.
type GrantedPermissionCreate struct {
	config
	mutation *GrantedPermissionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (gpc *GrantedPermissionCreate) SetCreatedAt(t time.Time) *GrantedPermissionCreate {
	gpc.mutation.SetCreatedAt(t)
	return gpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gpc *GrantedPermissionCreate) SetNillableCreatedAt(t *time.Time) *GrantedPermissionCreate {
	if t != nil {
		gpc.SetCreatedAt(*t)
	}
	return gpc
}

// SetUpdatedAt sets the "updated_at" field.
func (gpc *GrantedPermissionCreate) SetUpdatedAt(t time.Time) *GrantedPermissionCreate {
	gpc.mutation.SetUpdatedAt(t)
	return gpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gpc *GrantedPermissionCreate) SetNillableUpdatedAt(t *time.Time) *GrantedPermissionCreate {
	if t != nil {
		gpc.SetUpdatedAt(*t)
	}
	return gpc
}

// SetSubjectType sets the "subject_type" field.
func (gpc *GrantedPermissionCreate) SetSubjectType(gt grantedpermission.SubjectType) *GrantedPermissionCreate {
	gpc.mutation.SetSubjectType(gt)
	return gpc
}

// SetSubjectID sets the "subject_id" field.
func (gpc *GrantedPermissionCreate) SetSubjectID(u uuid.UUID) *GrantedPermissionCreate {
	gpc.mutation.SetSubjectID(u)
	return gpc
}

// SetObjectType sets the "object_type" field.
func (gpc *GrantedPermissionCreate) SetObjectType(gt grantedpermission.ObjectType) *GrantedPermissionCreate {
	gpc.mutation.SetObjectType(gt)
	return gpc
}

// SetObjectID sets the "object_id" field.
func (gpc *GrantedPermissionCreate) SetObjectID(u uuid.UUID) *GrantedPermissionCreate {
	gpc.mutation.SetObjectID(u)
	return gpc
}

// SetAction sets the "action" field.
func (gpc *GrantedPermissionCreate) SetAction(aa actions.PermissionAction) *GrantedPermissionCreate {
	gpc.mutation.SetAction(aa)
	return gpc
}

// SetID sets the "id" field.
func (gpc *GrantedPermissionCreate) SetID(u uuid.UUID) *GrantedPermissionCreate {
	gpc.mutation.SetID(u)
	return gpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gpc *GrantedPermissionCreate) SetNillableID(u *uuid.UUID) *GrantedPermissionCreate {
	if u != nil {
		gpc.SetID(*u)
	}
	return gpc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (gpc *GrantedPermissionCreate) SetUserID(id uuid.UUID) *GrantedPermissionCreate {
	gpc.mutation.SetUserID(id)
	return gpc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (gpc *GrantedPermissionCreate) SetNillableUserID(id *uuid.UUID) *GrantedPermissionCreate {
	if id != nil {
		gpc = gpc.SetUserID(*id)
	}
	return gpc
}

// SetUser sets the "user" edge to the User entity.
func (gpc *GrantedPermissionCreate) SetUser(u *User) *GrantedPermissionCreate {
	return gpc.SetUserID(u.ID)
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (gpc *GrantedPermissionCreate) SetGroupID(id uuid.UUID) *GrantedPermissionCreate {
	gpc.mutation.SetGroupID(id)
	return gpc
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (gpc *GrantedPermissionCreate) SetNillableGroupID(id *uuid.UUID) *GrantedPermissionCreate {
	if id != nil {
		gpc = gpc.SetGroupID(*id)
	}
	return gpc
}

// SetGroup sets the "group" edge to the Group entity.
func (gpc *GrantedPermissionCreate) SetGroup(g *Group) *GrantedPermissionCreate {
	return gpc.SetGroupID(g.ID)
}

// Mutation returns the GrantedPermissionMutation object of the builder.
func (gpc *GrantedPermissionCreate) Mutation() *GrantedPermissionMutation {
	return gpc.mutation
}

// Save creates the GrantedPermission in the database.
func (gpc *GrantedPermissionCreate) Save(ctx context.Context) (*GrantedPermission, error) {
	gpc.defaults()
	return withHooks(ctx, gpc.sqlSave, gpc.mutation, gpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gpc *GrantedPermissionCreate) SaveX(ctx context.Context) *GrantedPermission {
	v, err := gpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gpc *GrantedPermissionCreate) Exec(ctx context.Context) error {
	_, err := gpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpc *GrantedPermissionCreate) ExecX(ctx context.Context) {
	if err := gpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gpc *GrantedPermissionCreate) defaults() {
	if _, ok := gpc.mutation.CreatedAt(); !ok {
		v := grantedpermission.DefaultCreatedAt()
		gpc.mutation.SetCreatedAt(v)
	}
	if _, ok := gpc.mutation.UpdatedAt(); !ok {
		v := grantedpermission.DefaultUpdatedAt()
		gpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gpc.mutation.ID(); !ok {
		v := grantedpermission.DefaultID()
		gpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gpc *GrantedPermissionCreate) check() error {
	if _, ok := gpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GrantedPermission.created_at"`)}
	}
	if _, ok := gpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GrantedPermission.updated_at"`)}
	}
	if _, ok := gpc.mutation.SubjectType(); !ok {
		return &ValidationError{Name: "subject_type", err: errors.New(`ent: missing required field "GrantedPermission.subject_type"`)}
	}
	if v, ok := gpc.mutation.SubjectType(); ok {
		if err := grantedpermission.SubjectTypeValidator(v); err != nil {
			return &ValidationError{Name: "subject_type", err: fmt.Errorf(`ent: validator failed for field "GrantedPermission.subject_type": %w`, err)}
		}
	}
	if _, ok := gpc.mutation.SubjectID(); !ok {
		return &ValidationError{Name: "subject_id", err: errors.New(`ent: missing required field "GrantedPermission.subject_id"`)}
	}
	if _, ok := gpc.mutation.ObjectType(); !ok {
		return &ValidationError{Name: "object_type", err: errors.New(`ent: missing required field "GrantedPermission.object_type"`)}
	}
	if v, ok := gpc.mutation.ObjectType(); ok {
		if err := grantedpermission.ObjectTypeValidator(v); err != nil {
			return &ValidationError{Name: "object_type", err: fmt.Errorf(`ent: validator failed for field "GrantedPermission.object_type": %w`, err)}
		}
	}
	if _, ok := gpc.mutation.ObjectID(); !ok {
		return &ValidationError{Name: "object_id", err: errors.New(`ent: missing required field "GrantedPermission.object_id"`)}
	}
	if _, ok := gpc.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "GrantedPermission.action"`)}
	}
	if v, ok := gpc.mutation.Action(); ok {
		if err := grantedpermission.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "GrantedPermission.action": %w`, err)}
		}
	}
	return nil
}

func (gpc *GrantedPermissionCreate) sqlSave(ctx context.Context) (*GrantedPermission, error) {
	if err := gpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	gpc.mutation.id = &_node.ID
	gpc.mutation.done = true
	return _node, nil
}

func (gpc *GrantedPermissionCreate) createSpec() (*GrantedPermission, *sqlgraph.CreateSpec) {
	var (
		_node = &GrantedPermission{config: gpc.config}
		_spec = sqlgraph.NewCreateSpec(grantedpermission.Table, sqlgraph.NewFieldSpec(grantedpermission.FieldID, field.TypeUUID))
	)
	if id, ok := gpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gpc.mutation.CreatedAt(); ok {
		_spec.SetField(grantedpermission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gpc.mutation.UpdatedAt(); ok {
		_spec.SetField(grantedpermission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gpc.mutation.SubjectType(); ok {
		_spec.SetField(grantedpermission.FieldSubjectType, field.TypeEnum, value)
		_node.SubjectType = value
	}
	if value, ok := gpc.mutation.SubjectID(); ok {
		_spec.SetField(grantedpermission.FieldSubjectID, field.TypeUUID, value)
		_node.SubjectID = value
	}
	if value, ok := gpc.mutation.ObjectType(); ok {
		_spec.SetField(grantedpermission.FieldObjectType, field.TypeEnum, value)
		_node.ObjectType = value
	}
	if value, ok := gpc.mutation.ObjectID(); ok {
		_spec.SetField(grantedpermission.FieldObjectID, field.TypeUUID, value)
		_node.ObjectID = value
	}
	if value, ok := gpc.mutation.Action(); ok {
		_spec.SetField(grantedpermission.FieldAction, field.TypeEnum, value)
		_node.Action = value
	}
	if nodes := gpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grantedpermission.UserTable,
			Columns: []string{grantedpermission.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.granted_permission_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gpc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   grantedpermission.GroupTable,
			Columns: []string{grantedpermission.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.granted_permission_group = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GrantedPermissionCreateBulk is the builder for creating many GrantedPermission entities in bulk.
type GrantedPermissionCreateBulk struct {
	config
	err      error
	builders []*GrantedPermissionCreate
}

// Save creates the GrantedPermission entities in the database.
func (gpcb *GrantedPermissionCreateBulk) Save(ctx context.Context) ([]*GrantedPermission, error) {
	if gpcb.err != nil {
		return nil, gpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gpcb.builders))
	nodes := make([]*GrantedPermission, len(gpcb.builders))
	mutators := make([]Mutator, len(gpcb.builders))
	for i := range gpcb.builders {
		func(i int, root context.Context) {
			builder := gpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GrantedPermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gpcb *GrantedPermissionCreateBulk) SaveX(ctx context.Context) []*GrantedPermission {
	v, err := gpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gpcb *GrantedPermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := gpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpcb *GrantedPermissionCreateBulk) ExecX(ctx context.Context) {
	if err := gpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
