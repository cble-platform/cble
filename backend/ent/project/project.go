// Code generated by ent, DO NOT EDIT.

package project

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldQuotaCPU holds the string denoting the quota_cpu field in the database.
	FieldQuotaCPU = "quota_cpu"
	// FieldUsageCPU holds the string denoting the usage_cpu field in the database.
	FieldUsageCPU = "usage_cpu"
	// FieldQuotaRAM holds the string denoting the quota_ram field in the database.
	FieldQuotaRAM = "quota_ram"
	// FieldUsageRAM holds the string denoting the usage_ram field in the database.
	FieldUsageRAM = "usage_ram"
	// FieldQuotaDisk holds the string denoting the quota_disk field in the database.
	FieldQuotaDisk = "quota_disk"
	// FieldUsageDisk holds the string denoting the usage_disk field in the database.
	FieldUsageDisk = "usage_disk"
	// FieldQuotaNetwork holds the string denoting the quota_network field in the database.
	FieldQuotaNetwork = "quota_network"
	// FieldUsageNetwork holds the string denoting the usage_network field in the database.
	FieldUsageNetwork = "usage_network"
	// FieldQuotaRouter holds the string denoting the quota_router field in the database.
	FieldQuotaRouter = "quota_router"
	// FieldUsageRouter holds the string denoting the usage_router field in the database.
	FieldUsageRouter = "usage_router"
	// EdgeMembers holds the string denoting the members edge name in mutations.
	EdgeMembers = "members"
	// EdgeGroupMembers holds the string denoting the group_members edge name in mutations.
	EdgeGroupMembers = "group_members"
	// EdgeBlueprints holds the string denoting the blueprints edge name in mutations.
	EdgeBlueprints = "blueprints"
	// EdgeDeployments holds the string denoting the deployments edge name in mutations.
	EdgeDeployments = "deployments"
	// EdgeMemberships holds the string denoting the memberships edge name in mutations.
	EdgeMemberships = "memberships"
	// EdgeGroupMemberships holds the string denoting the group_memberships edge name in mutations.
	EdgeGroupMemberships = "group_memberships"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// MembersTable is the table that holds the members relation/edge. The primary key declared below.
	MembersTable = "memberships"
	// MembersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	MembersInverseTable = "users"
	// GroupMembersTable is the table that holds the group_members relation/edge. The primary key declared below.
	GroupMembersTable = "group_memberships"
	// GroupMembersInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupMembersInverseTable = "groups"
	// BlueprintsTable is the table that holds the blueprints relation/edge.
	BlueprintsTable = "blueprints"
	// BlueprintsInverseTable is the table name for the Blueprint entity.
	// It exists in this package in order to avoid circular dependency with the "blueprint" package.
	BlueprintsInverseTable = "blueprints"
	// BlueprintsColumn is the table column denoting the blueprints relation/edge.
	BlueprintsColumn = "blueprint_project"
	// DeploymentsTable is the table that holds the deployments relation/edge.
	DeploymentsTable = "deployments"
	// DeploymentsInverseTable is the table name for the Deployment entity.
	// It exists in this package in order to avoid circular dependency with the "deployment" package.
	DeploymentsInverseTable = "deployments"
	// DeploymentsColumn is the table column denoting the deployments relation/edge.
	DeploymentsColumn = "deployment_project"
	// MembershipsTable is the table that holds the memberships relation/edge.
	MembershipsTable = "memberships"
	// MembershipsInverseTable is the table name for the Membership entity.
	// It exists in this package in order to avoid circular dependency with the "membership" package.
	MembershipsInverseTable = "memberships"
	// MembershipsColumn is the table column denoting the memberships relation/edge.
	MembershipsColumn = "project_id"
	// GroupMembershipsTable is the table that holds the group_memberships relation/edge.
	GroupMembershipsTable = "group_memberships"
	// GroupMembershipsInverseTable is the table name for the GroupMembership entity.
	// It exists in this package in order to avoid circular dependency with the "groupmembership" package.
	GroupMembershipsInverseTable = "group_memberships"
	// GroupMembershipsColumn is the table column denoting the group_memberships relation/edge.
	GroupMembershipsColumn = "project_id"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldQuotaCPU,
	FieldUsageCPU,
	FieldQuotaRAM,
	FieldUsageRAM,
	FieldQuotaDisk,
	FieldUsageDisk,
	FieldQuotaNetwork,
	FieldUsageNetwork,
	FieldQuotaRouter,
	FieldUsageRouter,
}

var (
	// MembersPrimaryKey and MembersColumn2 are the table columns denoting the
	// primary key for the members relation (M2M).
	MembersPrimaryKey = []string{"project_id", "user_id"}
	// GroupMembersPrimaryKey and GroupMembersColumn2 are the table columns denoting the
	// primary key for the group_members relation (M2M).
	GroupMembersPrimaryKey = []string{"project_id", "group_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultUsageCPU holds the default value on creation for the "usage_cpu" field.
	DefaultUsageCPU int
	// DefaultUsageRAM holds the default value on creation for the "usage_ram" field.
	DefaultUsageRAM int
	// DefaultUsageDisk holds the default value on creation for the "usage_disk" field.
	DefaultUsageDisk int
	// DefaultUsageNetwork holds the default value on creation for the "usage_network" field.
	DefaultUsageNetwork int
	// DefaultUsageRouter holds the default value on creation for the "usage_router" field.
	DefaultUsageRouter int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Project queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByQuotaCPU orders the results by the quota_cpu field.
func ByQuotaCPU(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuotaCPU, opts...).ToFunc()
}

// ByUsageCPU orders the results by the usage_cpu field.
func ByUsageCPU(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageCPU, opts...).ToFunc()
}

// ByQuotaRAM orders the results by the quota_ram field.
func ByQuotaRAM(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuotaRAM, opts...).ToFunc()
}

// ByUsageRAM orders the results by the usage_ram field.
func ByUsageRAM(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageRAM, opts...).ToFunc()
}

// ByQuotaDisk orders the results by the quota_disk field.
func ByQuotaDisk(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuotaDisk, opts...).ToFunc()
}

// ByUsageDisk orders the results by the usage_disk field.
func ByUsageDisk(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageDisk, opts...).ToFunc()
}

// ByQuotaNetwork orders the results by the quota_network field.
func ByQuotaNetwork(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuotaNetwork, opts...).ToFunc()
}

// ByUsageNetwork orders the results by the usage_network field.
func ByUsageNetwork(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageNetwork, opts...).ToFunc()
}

// ByQuotaRouter orders the results by the quota_router field.
func ByQuotaRouter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuotaRouter, opts...).ToFunc()
}

// ByUsageRouter orders the results by the usage_router field.
func ByUsageRouter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsageRouter, opts...).ToFunc()
}

// ByMembersCount orders the results by members count.
func ByMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembersStep(), opts...)
	}
}

// ByMembers orders the results by members terms.
func ByMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupMembersCount orders the results by group_members count.
func ByGroupMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupMembersStep(), opts...)
	}
}

// ByGroupMembers orders the results by group_members terms.
func ByGroupMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBlueprintsCount orders the results by blueprints count.
func ByBlueprintsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlueprintsStep(), opts...)
	}
}

// ByBlueprints orders the results by blueprints terms.
func ByBlueprints(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlueprintsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeploymentsCount orders the results by deployments count.
func ByDeploymentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeploymentsStep(), opts...)
	}
}

// ByDeployments orders the results by deployments terms.
func ByDeployments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeploymentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMembershipsCount orders the results by memberships count.
func ByMembershipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembershipsStep(), opts...)
	}
}

// ByMemberships orders the results by memberships terms.
func ByMemberships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembershipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupMembershipsCount orders the results by group_memberships count.
func ByGroupMembershipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupMembershipsStep(), opts...)
	}
}

// ByGroupMemberships orders the results by group_memberships terms.
func ByGroupMemberships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupMembershipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, MembersTable, MembersPrimaryKey...),
	)
}
func newGroupMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupMembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, GroupMembersTable, GroupMembersPrimaryKey...),
	)
}
func newBlueprintsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlueprintsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, BlueprintsTable, BlueprintsColumn),
	)
}
func newDeploymentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeploymentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DeploymentsTable, DeploymentsColumn),
	)
}
func newMembershipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembershipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MembershipsTable, MembershipsColumn),
	)
}
func newGroupMembershipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupMembershipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, GroupMembershipsTable, GroupMembershipsColumn),
	)
}
