// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cble-platform/cble-backend/ent/blueprint"
	"github.com/cble-platform/cble-backend/ent/deployment"
	"github.com/cble-platform/cble-backend/ent/project"
	"github.com/cble-platform/cble-backend/ent/user"
	"github.com/google/uuid"
)

// Deployment is the model entity for the Deployment schema.
type Deployment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// The last time this deployment was accessed (used for auto-suspending deployments)
	LastAccessed time.Time `json:"last_accessed,omitempty"`
	// Display name of the deployment (defaults to blueprint name)
	Name string `json:"name,omitempty"`
	// Display description of the deployment (supports markdown; defaults to blueprint description)
	Description string `json:"description,omitempty"`
	// The overall state of the deployment (should only by updated by the deploy engine)
	State deployment.State `json:"state,omitempty"`
	// Stores the variable values to be injected into the blueprint template
	TemplateVars map[string]string `json:"template_vars,omitempty"`
	// The time this deployment expires
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeploymentQuery when eager-loading is set.
	Edges                DeploymentEdges `json:"edges"`
	deployment_blueprint *uuid.UUID
	deployment_requester *uuid.UUID
	deployment_project   *uuid.UUID
	selectValues         sql.SelectValues
}

// DeploymentEdges holds the relations/edges for other nodes in the graph.
type DeploymentEdges struct {
	// The blueprint for this deployment
	Blueprint *Blueprint `json:"blueprint,omitempty"`
	// The deployment nodes belonging to this deployment
	DeploymentNodes []*DeploymentNode `json:"deployment_nodes,omitempty"`
	// The user who requested this deployment
	Requester *User `json:"requester,omitempty"`
	// The project to contain this deployment
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// BlueprintOrErr returns the Blueprint value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeploymentEdges) BlueprintOrErr() (*Blueprint, error) {
	if e.loadedTypes[0] {
		if e.Blueprint == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: blueprint.Label}
		}
		return e.Blueprint, nil
	}
	return nil, &NotLoadedError{edge: "blueprint"}
}

// DeploymentNodesOrErr returns the DeploymentNodes value or an error if the edge
// was not loaded in eager-loading.
func (e DeploymentEdges) DeploymentNodesOrErr() ([]*DeploymentNode, error) {
	if e.loadedTypes[1] {
		return e.DeploymentNodes, nil
	}
	return nil, &NotLoadedError{edge: "deployment_nodes"}
}

// RequesterOrErr returns the Requester value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeploymentEdges) RequesterOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.Requester == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Requester, nil
	}
	return nil, &NotLoadedError{edge: "requester"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeploymentEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[3] {
		if e.Project == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Deployment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deployment.FieldTemplateVars:
			values[i] = new([]byte)
		case deployment.FieldName, deployment.FieldDescription, deployment.FieldState:
			values[i] = new(sql.NullString)
		case deployment.FieldCreatedAt, deployment.FieldUpdatedAt, deployment.FieldLastAccessed, deployment.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case deployment.FieldID:
			values[i] = new(uuid.UUID)
		case deployment.ForeignKeys[0]: // deployment_blueprint
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case deployment.ForeignKeys[1]: // deployment_requester
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case deployment.ForeignKeys[2]: // deployment_project
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Deployment fields.
func (d *Deployment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deployment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case deployment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case deployment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		case deployment.FieldLastAccessed:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_accessed", values[i])
			} else if value.Valid {
				d.LastAccessed = value.Time
			}
		case deployment.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case deployment.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				d.Description = value.String
			}
		case deployment.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				d.State = deployment.State(value.String)
			}
		case deployment.FieldTemplateVars:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field template_vars", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.TemplateVars); err != nil {
					return fmt.Errorf("unmarshal field template_vars: %w", err)
				}
			}
		case deployment.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				d.ExpiresAt = value.Time
			}
		case deployment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_blueprint", values[i])
			} else if value.Valid {
				d.deployment_blueprint = new(uuid.UUID)
				*d.deployment_blueprint = *value.S.(*uuid.UUID)
			}
		case deployment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_requester", values[i])
			} else if value.Valid {
				d.deployment_requester = new(uuid.UUID)
				*d.deployment_requester = *value.S.(*uuid.UUID)
			}
		case deployment.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_project", values[i])
			} else if value.Valid {
				d.deployment_project = new(uuid.UUID)
				*d.deployment_project = *value.S.(*uuid.UUID)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Deployment.
// This includes values selected through modifiers, order, etc.
func (d *Deployment) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryBlueprint queries the "blueprint" edge of the Deployment entity.
func (d *Deployment) QueryBlueprint() *BlueprintQuery {
	return NewDeploymentClient(d.config).QueryBlueprint(d)
}

// QueryDeploymentNodes queries the "deployment_nodes" edge of the Deployment entity.
func (d *Deployment) QueryDeploymentNodes() *DeploymentNodeQuery {
	return NewDeploymentClient(d.config).QueryDeploymentNodes(d)
}

// QueryRequester queries the "requester" edge of the Deployment entity.
func (d *Deployment) QueryRequester() *UserQuery {
	return NewDeploymentClient(d.config).QueryRequester(d)
}

// QueryProject queries the "project" edge of the Deployment entity.
func (d *Deployment) QueryProject() *ProjectQuery {
	return NewDeploymentClient(d.config).QueryProject(d)
}

// Update returns a builder for updating this Deployment.
// Note that you need to call Deployment.Unwrap() before calling this method if this Deployment
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Deployment) Update() *DeploymentUpdateOne {
	return NewDeploymentClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Deployment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Deployment) Unwrap() *Deployment {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Deployment is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Deployment) String() string {
	var builder strings.Builder
	builder.WriteString("Deployment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_accessed=")
	builder.WriteString(d.LastAccessed.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(d.Description)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", d.State))
	builder.WriteString(", ")
	builder.WriteString("template_vars=")
	builder.WriteString(fmt.Sprintf("%v", d.TemplateVars))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(d.ExpiresAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Deployments is a parsable slice of Deployment.
type Deployments []*Deployment
