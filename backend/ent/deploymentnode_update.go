// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cble-platform/cble/backend/ent/deployment"
	"github.com/cble-platform/cble/backend/ent/deploymentnode"
	"github.com/cble-platform/cble/backend/ent/predicate"
	"github.com/cble-platform/cble/backend/ent/resource"
	"github.com/google/uuid"
)

// DeploymentNodeUpdate is the builder for updating DeploymentNode entities.
type DeploymentNodeUpdate struct {
	config
	hooks    []Hook
	mutation *DeploymentNodeMutation
}

// Where appends a list predicates to the DeploymentNodeUpdate builder.
func (dnu *DeploymentNodeUpdate) Where(ps ...predicate.DeploymentNode) *DeploymentNodeUpdate {
	dnu.mutation.Where(ps...)
	return dnu
}

// SetUpdatedAt sets the "updated_at" field.
func (dnu *DeploymentNodeUpdate) SetUpdatedAt(t time.Time) *DeploymentNodeUpdate {
	dnu.mutation.SetUpdatedAt(t)
	return dnu
}

// SetState sets the "state" field.
func (dnu *DeploymentNodeUpdate) SetState(d deploymentnode.State) *DeploymentNodeUpdate {
	dnu.mutation.SetState(d)
	return dnu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (dnu *DeploymentNodeUpdate) SetNillableState(d *deploymentnode.State) *DeploymentNodeUpdate {
	if d != nil {
		dnu.SetState(*d)
	}
	return dnu
}

// SetVars sets the "vars" field.
func (dnu *DeploymentNodeUpdate) SetVars(m map[string]string) *DeploymentNodeUpdate {
	dnu.mutation.SetVars(m)
	return dnu
}

// SetDeploymentID sets the "deployment" edge to the Deployment entity by ID.
func (dnu *DeploymentNodeUpdate) SetDeploymentID(id uuid.UUID) *DeploymentNodeUpdate {
	dnu.mutation.SetDeploymentID(id)
	return dnu
}

// SetDeployment sets the "deployment" edge to the Deployment entity.
func (dnu *DeploymentNodeUpdate) SetDeployment(d *Deployment) *DeploymentNodeUpdate {
	return dnu.SetDeploymentID(d.ID)
}

// SetResourceID sets the "resource" edge to the Resource entity by ID.
func (dnu *DeploymentNodeUpdate) SetResourceID(id uuid.UUID) *DeploymentNodeUpdate {
	dnu.mutation.SetResourceID(id)
	return dnu
}

// SetResource sets the "resource" edge to the Resource entity.
func (dnu *DeploymentNodeUpdate) SetResource(r *Resource) *DeploymentNodeUpdate {
	return dnu.SetResourceID(r.ID)
}

// AddPrevNodeIDs adds the "prev_nodes" edge to the DeploymentNode entity by IDs.
func (dnu *DeploymentNodeUpdate) AddPrevNodeIDs(ids ...uuid.UUID) *DeploymentNodeUpdate {
	dnu.mutation.AddPrevNodeIDs(ids...)
	return dnu
}

// AddPrevNodes adds the "prev_nodes" edges to the DeploymentNode entity.
func (dnu *DeploymentNodeUpdate) AddPrevNodes(d ...*DeploymentNode) *DeploymentNodeUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dnu.AddPrevNodeIDs(ids...)
}

// AddNextNodeIDs adds the "next_nodes" edge to the DeploymentNode entity by IDs.
func (dnu *DeploymentNodeUpdate) AddNextNodeIDs(ids ...uuid.UUID) *DeploymentNodeUpdate {
	dnu.mutation.AddNextNodeIDs(ids...)
	return dnu
}

// AddNextNodes adds the "next_nodes" edges to the DeploymentNode entity.
func (dnu *DeploymentNodeUpdate) AddNextNodes(d ...*DeploymentNode) *DeploymentNodeUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dnu.AddNextNodeIDs(ids...)
}

// Mutation returns the DeploymentNodeMutation object of the builder.
func (dnu *DeploymentNodeUpdate) Mutation() *DeploymentNodeMutation {
	return dnu.mutation
}

// ClearDeployment clears the "deployment" edge to the Deployment entity.
func (dnu *DeploymentNodeUpdate) ClearDeployment() *DeploymentNodeUpdate {
	dnu.mutation.ClearDeployment()
	return dnu
}

// ClearResource clears the "resource" edge to the Resource entity.
func (dnu *DeploymentNodeUpdate) ClearResource() *DeploymentNodeUpdate {
	dnu.mutation.ClearResource()
	return dnu
}

// ClearPrevNodes clears all "prev_nodes" edges to the DeploymentNode entity.
func (dnu *DeploymentNodeUpdate) ClearPrevNodes() *DeploymentNodeUpdate {
	dnu.mutation.ClearPrevNodes()
	return dnu
}

// RemovePrevNodeIDs removes the "prev_nodes" edge to DeploymentNode entities by IDs.
func (dnu *DeploymentNodeUpdate) RemovePrevNodeIDs(ids ...uuid.UUID) *DeploymentNodeUpdate {
	dnu.mutation.RemovePrevNodeIDs(ids...)
	return dnu
}

// RemovePrevNodes removes "prev_nodes" edges to DeploymentNode entities.
func (dnu *DeploymentNodeUpdate) RemovePrevNodes(d ...*DeploymentNode) *DeploymentNodeUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dnu.RemovePrevNodeIDs(ids...)
}

// ClearNextNodes clears all "next_nodes" edges to the DeploymentNode entity.
func (dnu *DeploymentNodeUpdate) ClearNextNodes() *DeploymentNodeUpdate {
	dnu.mutation.ClearNextNodes()
	return dnu
}

// RemoveNextNodeIDs removes the "next_nodes" edge to DeploymentNode entities by IDs.
func (dnu *DeploymentNodeUpdate) RemoveNextNodeIDs(ids ...uuid.UUID) *DeploymentNodeUpdate {
	dnu.mutation.RemoveNextNodeIDs(ids...)
	return dnu
}

// RemoveNextNodes removes "next_nodes" edges to DeploymentNode entities.
func (dnu *DeploymentNodeUpdate) RemoveNextNodes(d ...*DeploymentNode) *DeploymentNodeUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dnu.RemoveNextNodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dnu *DeploymentNodeUpdate) Save(ctx context.Context) (int, error) {
	dnu.defaults()
	return withHooks(ctx, dnu.sqlSave, dnu.mutation, dnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dnu *DeploymentNodeUpdate) SaveX(ctx context.Context) int {
	affected, err := dnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dnu *DeploymentNodeUpdate) Exec(ctx context.Context) error {
	_, err := dnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dnu *DeploymentNodeUpdate) ExecX(ctx context.Context) {
	if err := dnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dnu *DeploymentNodeUpdate) defaults() {
	if _, ok := dnu.mutation.UpdatedAt(); !ok {
		v := deploymentnode.UpdateDefaultUpdatedAt()
		dnu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dnu *DeploymentNodeUpdate) check() error {
	if v, ok := dnu.mutation.State(); ok {
		if err := deploymentnode.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "DeploymentNode.state": %w`, err)}
		}
	}
	if _, ok := dnu.mutation.DeploymentID(); dnu.mutation.DeploymentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeploymentNode.deployment"`)
	}
	if _, ok := dnu.mutation.ResourceID(); dnu.mutation.ResourceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeploymentNode.resource"`)
	}
	return nil
}

func (dnu *DeploymentNodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deploymentnode.Table, deploymentnode.Columns, sqlgraph.NewFieldSpec(deploymentnode.FieldID, field.TypeUUID))
	if ps := dnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dnu.mutation.UpdatedAt(); ok {
		_spec.SetField(deploymentnode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dnu.mutation.State(); ok {
		_spec.SetField(deploymentnode.FieldState, field.TypeEnum, value)
	}
	if value, ok := dnu.mutation.Vars(); ok {
		_spec.SetField(deploymentnode.FieldVars, field.TypeJSON, value)
	}
	if dnu.mutation.DeploymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentnode.DeploymentTable,
			Columns: []string{deploymentnode.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dnu.mutation.DeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentnode.DeploymentTable,
			Columns: []string{deploymentnode.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dnu.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentnode.ResourceTable,
			Columns: []string{deploymentnode.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dnu.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentnode.ResourceTable,
			Columns: []string{deploymentnode.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dnu.mutation.PrevNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deploymentnode.PrevNodesTable,
			Columns: deploymentnode.PrevNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentnode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dnu.mutation.RemovedPrevNodesIDs(); len(nodes) > 0 && !dnu.mutation.PrevNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deploymentnode.PrevNodesTable,
			Columns: deploymentnode.PrevNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentnode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dnu.mutation.PrevNodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deploymentnode.PrevNodesTable,
			Columns: deploymentnode.PrevNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentnode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dnu.mutation.NextNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentnode.NextNodesTable,
			Columns: deploymentnode.NextNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentnode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dnu.mutation.RemovedNextNodesIDs(); len(nodes) > 0 && !dnu.mutation.NextNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentnode.NextNodesTable,
			Columns: deploymentnode.NextNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentnode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dnu.mutation.NextNodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentnode.NextNodesTable,
			Columns: deploymentnode.NextNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentnode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deploymentnode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dnu.mutation.done = true
	return n, nil
}

// DeploymentNodeUpdateOne is the builder for updating a single DeploymentNode entity.
type DeploymentNodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeploymentNodeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (dnuo *DeploymentNodeUpdateOne) SetUpdatedAt(t time.Time) *DeploymentNodeUpdateOne {
	dnuo.mutation.SetUpdatedAt(t)
	return dnuo
}

// SetState sets the "state" field.
func (dnuo *DeploymentNodeUpdateOne) SetState(d deploymentnode.State) *DeploymentNodeUpdateOne {
	dnuo.mutation.SetState(d)
	return dnuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (dnuo *DeploymentNodeUpdateOne) SetNillableState(d *deploymentnode.State) *DeploymentNodeUpdateOne {
	if d != nil {
		dnuo.SetState(*d)
	}
	return dnuo
}

// SetVars sets the "vars" field.
func (dnuo *DeploymentNodeUpdateOne) SetVars(m map[string]string) *DeploymentNodeUpdateOne {
	dnuo.mutation.SetVars(m)
	return dnuo
}

// SetDeploymentID sets the "deployment" edge to the Deployment entity by ID.
func (dnuo *DeploymentNodeUpdateOne) SetDeploymentID(id uuid.UUID) *DeploymentNodeUpdateOne {
	dnuo.mutation.SetDeploymentID(id)
	return dnuo
}

// SetDeployment sets the "deployment" edge to the Deployment entity.
func (dnuo *DeploymentNodeUpdateOne) SetDeployment(d *Deployment) *DeploymentNodeUpdateOne {
	return dnuo.SetDeploymentID(d.ID)
}

// SetResourceID sets the "resource" edge to the Resource entity by ID.
func (dnuo *DeploymentNodeUpdateOne) SetResourceID(id uuid.UUID) *DeploymentNodeUpdateOne {
	dnuo.mutation.SetResourceID(id)
	return dnuo
}

// SetResource sets the "resource" edge to the Resource entity.
func (dnuo *DeploymentNodeUpdateOne) SetResource(r *Resource) *DeploymentNodeUpdateOne {
	return dnuo.SetResourceID(r.ID)
}

// AddPrevNodeIDs adds the "prev_nodes" edge to the DeploymentNode entity by IDs.
func (dnuo *DeploymentNodeUpdateOne) AddPrevNodeIDs(ids ...uuid.UUID) *DeploymentNodeUpdateOne {
	dnuo.mutation.AddPrevNodeIDs(ids...)
	return dnuo
}

// AddPrevNodes adds the "prev_nodes" edges to the DeploymentNode entity.
func (dnuo *DeploymentNodeUpdateOne) AddPrevNodes(d ...*DeploymentNode) *DeploymentNodeUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dnuo.AddPrevNodeIDs(ids...)
}

// AddNextNodeIDs adds the "next_nodes" edge to the DeploymentNode entity by IDs.
func (dnuo *DeploymentNodeUpdateOne) AddNextNodeIDs(ids ...uuid.UUID) *DeploymentNodeUpdateOne {
	dnuo.mutation.AddNextNodeIDs(ids...)
	return dnuo
}

// AddNextNodes adds the "next_nodes" edges to the DeploymentNode entity.
func (dnuo *DeploymentNodeUpdateOne) AddNextNodes(d ...*DeploymentNode) *DeploymentNodeUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dnuo.AddNextNodeIDs(ids...)
}

// Mutation returns the DeploymentNodeMutation object of the builder.
func (dnuo *DeploymentNodeUpdateOne) Mutation() *DeploymentNodeMutation {
	return dnuo.mutation
}

// ClearDeployment clears the "deployment" edge to the Deployment entity.
func (dnuo *DeploymentNodeUpdateOne) ClearDeployment() *DeploymentNodeUpdateOne {
	dnuo.mutation.ClearDeployment()
	return dnuo
}

// ClearResource clears the "resource" edge to the Resource entity.
func (dnuo *DeploymentNodeUpdateOne) ClearResource() *DeploymentNodeUpdateOne {
	dnuo.mutation.ClearResource()
	return dnuo
}

// ClearPrevNodes clears all "prev_nodes" edges to the DeploymentNode entity.
func (dnuo *DeploymentNodeUpdateOne) ClearPrevNodes() *DeploymentNodeUpdateOne {
	dnuo.mutation.ClearPrevNodes()
	return dnuo
}

// RemovePrevNodeIDs removes the "prev_nodes" edge to DeploymentNode entities by IDs.
func (dnuo *DeploymentNodeUpdateOne) RemovePrevNodeIDs(ids ...uuid.UUID) *DeploymentNodeUpdateOne {
	dnuo.mutation.RemovePrevNodeIDs(ids...)
	return dnuo
}

// RemovePrevNodes removes "prev_nodes" edges to DeploymentNode entities.
func (dnuo *DeploymentNodeUpdateOne) RemovePrevNodes(d ...*DeploymentNode) *DeploymentNodeUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dnuo.RemovePrevNodeIDs(ids...)
}

// ClearNextNodes clears all "next_nodes" edges to the DeploymentNode entity.
func (dnuo *DeploymentNodeUpdateOne) ClearNextNodes() *DeploymentNodeUpdateOne {
	dnuo.mutation.ClearNextNodes()
	return dnuo
}

// RemoveNextNodeIDs removes the "next_nodes" edge to DeploymentNode entities by IDs.
func (dnuo *DeploymentNodeUpdateOne) RemoveNextNodeIDs(ids ...uuid.UUID) *DeploymentNodeUpdateOne {
	dnuo.mutation.RemoveNextNodeIDs(ids...)
	return dnuo
}

// RemoveNextNodes removes "next_nodes" edges to DeploymentNode entities.
func (dnuo *DeploymentNodeUpdateOne) RemoveNextNodes(d ...*DeploymentNode) *DeploymentNodeUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dnuo.RemoveNextNodeIDs(ids...)
}

// Where appends a list predicates to the DeploymentNodeUpdate builder.
func (dnuo *DeploymentNodeUpdateOne) Where(ps ...predicate.DeploymentNode) *DeploymentNodeUpdateOne {
	dnuo.mutation.Where(ps...)
	return dnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dnuo *DeploymentNodeUpdateOne) Select(field string, fields ...string) *DeploymentNodeUpdateOne {
	dnuo.fields = append([]string{field}, fields...)
	return dnuo
}

// Save executes the query and returns the updated DeploymentNode entity.
func (dnuo *DeploymentNodeUpdateOne) Save(ctx context.Context) (*DeploymentNode, error) {
	dnuo.defaults()
	return withHooks(ctx, dnuo.sqlSave, dnuo.mutation, dnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dnuo *DeploymentNodeUpdateOne) SaveX(ctx context.Context) *DeploymentNode {
	node, err := dnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dnuo *DeploymentNodeUpdateOne) Exec(ctx context.Context) error {
	_, err := dnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dnuo *DeploymentNodeUpdateOne) ExecX(ctx context.Context) {
	if err := dnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dnuo *DeploymentNodeUpdateOne) defaults() {
	if _, ok := dnuo.mutation.UpdatedAt(); !ok {
		v := deploymentnode.UpdateDefaultUpdatedAt()
		dnuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dnuo *DeploymentNodeUpdateOne) check() error {
	if v, ok := dnuo.mutation.State(); ok {
		if err := deploymentnode.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "DeploymentNode.state": %w`, err)}
		}
	}
	if _, ok := dnuo.mutation.DeploymentID(); dnuo.mutation.DeploymentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeploymentNode.deployment"`)
	}
	if _, ok := dnuo.mutation.ResourceID(); dnuo.mutation.ResourceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeploymentNode.resource"`)
	}
	return nil
}

func (dnuo *DeploymentNodeUpdateOne) sqlSave(ctx context.Context) (_node *DeploymentNode, err error) {
	if err := dnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deploymentnode.Table, deploymentnode.Columns, sqlgraph.NewFieldSpec(deploymentnode.FieldID, field.TypeUUID))
	id, ok := dnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeploymentNode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deploymentnode.FieldID)
		for _, f := range fields {
			if !deploymentnode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deploymentnode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dnuo.mutation.UpdatedAt(); ok {
		_spec.SetField(deploymentnode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dnuo.mutation.State(); ok {
		_spec.SetField(deploymentnode.FieldState, field.TypeEnum, value)
	}
	if value, ok := dnuo.mutation.Vars(); ok {
		_spec.SetField(deploymentnode.FieldVars, field.TypeJSON, value)
	}
	if dnuo.mutation.DeploymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentnode.DeploymentTable,
			Columns: []string{deploymentnode.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dnuo.mutation.DeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentnode.DeploymentTable,
			Columns: []string{deploymentnode.DeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dnuo.mutation.ResourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentnode.ResourceTable,
			Columns: []string{deploymentnode.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dnuo.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentnode.ResourceTable,
			Columns: []string{deploymentnode.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dnuo.mutation.PrevNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deploymentnode.PrevNodesTable,
			Columns: deploymentnode.PrevNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentnode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dnuo.mutation.RemovedPrevNodesIDs(); len(nodes) > 0 && !dnuo.mutation.PrevNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deploymentnode.PrevNodesTable,
			Columns: deploymentnode.PrevNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentnode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dnuo.mutation.PrevNodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deploymentnode.PrevNodesTable,
			Columns: deploymentnode.PrevNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentnode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dnuo.mutation.NextNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentnode.NextNodesTable,
			Columns: deploymentnode.NextNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentnode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dnuo.mutation.RemovedNextNodesIDs(); len(nodes) > 0 && !dnuo.mutation.NextNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentnode.NextNodesTable,
			Columns: deploymentnode.NextNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentnode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dnuo.mutation.NextNodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deploymentnode.NextNodesTable,
			Columns: deploymentnode.NextNodesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deploymentnode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeploymentNode{config: dnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deploymentnode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dnuo.mutation.done = true
	return _node, nil
}
