// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cble-platform/cble/backend/ent/deploymentnode"
	"github.com/cble-platform/cble/backend/ent/predicate"
)

// DeploymentNodeDelete is the builder for deleting a DeploymentNode entity.
type DeploymentNodeDelete struct {
	config
	hooks    []Hook
	mutation *DeploymentNodeMutation
}

// Where appends a list predicates to the DeploymentNodeDelete builder.
func (dnd *DeploymentNodeDelete) Where(ps ...predicate.DeploymentNode) *DeploymentNodeDelete {
	dnd.mutation.Where(ps...)
	return dnd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dnd *DeploymentNodeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, dnd.sqlExec, dnd.mutation, dnd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dnd *DeploymentNodeDelete) ExecX(ctx context.Context) int {
	n, err := dnd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dnd *DeploymentNodeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(deploymentnode.Table, sqlgraph.NewFieldSpec(deploymentnode.FieldID, field.TypeUUID))
	if ps := dnd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dnd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dnd.mutation.done = true
	return affected, err
}

// DeploymentNodeDeleteOne is the builder for deleting a single DeploymentNode entity.
type DeploymentNodeDeleteOne struct {
	dnd *DeploymentNodeDelete
}

// Where appends a list predicates to the DeploymentNodeDelete builder.
func (dndo *DeploymentNodeDeleteOne) Where(ps ...predicate.DeploymentNode) *DeploymentNodeDeleteOne {
	dndo.dnd.mutation.Where(ps...)
	return dndo
}

// Exec executes the deletion query.
func (dndo *DeploymentNodeDeleteOne) Exec(ctx context.Context) error {
	n, err := dndo.dnd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{deploymentnode.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dndo *DeploymentNodeDeleteOne) ExecX(ctx context.Context) {
	if err := dndo.Exec(ctx); err != nil {
		panic(err)
	}
}
