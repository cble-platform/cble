// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cble-platform/cble-backend/engine/models"
	"github.com/cble-platform/cble-backend/ent/blueprint"
	"github.com/cble-platform/cble-backend/ent/deployment"
	"github.com/cble-platform/cble-backend/ent/project"
	entprovider "github.com/cble-platform/cble-backend/ent/provider"
	"github.com/cble-platform/cble-backend/ent/resource"
	"github.com/google/uuid"
)

// BlueprintCreate is the builder for creating a Blueprint entity.
type BlueprintCreate struct {
	config
	mutation *BlueprintMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (bc *BlueprintCreate) SetCreatedAt(t time.Time) *BlueprintCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BlueprintCreate) SetNillableCreatedAt(t *time.Time) *BlueprintCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BlueprintCreate) SetUpdatedAt(t time.Time) *BlueprintCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BlueprintCreate) SetNillableUpdatedAt(t *time.Time) *BlueprintCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetName sets the "name" field.
func (bc *BlueprintCreate) SetName(s string) *BlueprintCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetDescription sets the "description" field.
func (bc *BlueprintCreate) SetDescription(s string) *BlueprintCreate {
	bc.mutation.SetDescription(s)
	return bc
}

// SetBlueprintTemplate sets the "blueprint_template" field.
func (bc *BlueprintCreate) SetBlueprintTemplate(b []byte) *BlueprintCreate {
	bc.mutation.SetBlueprintTemplate(b)
	return bc
}

// SetVariableTypes sets the "variable_types" field.
func (bc *BlueprintCreate) SetVariableTypes(mvt map[string]models.BlueprintVariableType) *BlueprintCreate {
	bc.mutation.SetVariableTypes(mvt)
	return bc
}

// SetID sets the "id" field.
func (bc *BlueprintCreate) SetID(u uuid.UUID) *BlueprintCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BlueprintCreate) SetNillableID(u *uuid.UUID) *BlueprintCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// SetProviderID sets the "provider" edge to the Provider entity by ID.
func (bc *BlueprintCreate) SetProviderID(id uuid.UUID) *BlueprintCreate {
	bc.mutation.SetProviderID(id)
	return bc
}

// SetProvider sets the "provider" edge to the Provider entity.
func (bc *BlueprintCreate) SetProvider(p *Provider) *BlueprintCreate {
	return bc.SetProviderID(p.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (bc *BlueprintCreate) SetProjectID(id uuid.UUID) *BlueprintCreate {
	bc.mutation.SetProjectID(id)
	return bc
}

// SetProject sets the "project" edge to the Project entity.
func (bc *BlueprintCreate) SetProject(p *Project) *BlueprintCreate {
	return bc.SetProjectID(p.ID)
}

// AddResourceIDs adds the "resources" edge to the Resource entity by IDs.
func (bc *BlueprintCreate) AddResourceIDs(ids ...uuid.UUID) *BlueprintCreate {
	bc.mutation.AddResourceIDs(ids...)
	return bc
}

// AddResources adds the "resources" edges to the Resource entity.
func (bc *BlueprintCreate) AddResources(r ...*Resource) *BlueprintCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return bc.AddResourceIDs(ids...)
}

// AddDeploymentIDs adds the "deployments" edge to the Deployment entity by IDs.
func (bc *BlueprintCreate) AddDeploymentIDs(ids ...uuid.UUID) *BlueprintCreate {
	bc.mutation.AddDeploymentIDs(ids...)
	return bc
}

// AddDeployments adds the "deployments" edges to the Deployment entity.
func (bc *BlueprintCreate) AddDeployments(d ...*Deployment) *BlueprintCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return bc.AddDeploymentIDs(ids...)
}

// Mutation returns the BlueprintMutation object of the builder.
func (bc *BlueprintCreate) Mutation() *BlueprintMutation {
	return bc.mutation
}

// Save creates the Blueprint in the database.
func (bc *BlueprintCreate) Save(ctx context.Context) (*Blueprint, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BlueprintCreate) SaveX(ctx context.Context) *Blueprint {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BlueprintCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BlueprintCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BlueprintCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := blueprint.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := blueprint.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := blueprint.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BlueprintCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Blueprint.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Blueprint.updated_at"`)}
	}
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Blueprint.name"`)}
	}
	if _, ok := bc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Blueprint.description"`)}
	}
	if _, ok := bc.mutation.BlueprintTemplate(); !ok {
		return &ValidationError{Name: "blueprint_template", err: errors.New(`ent: missing required field "Blueprint.blueprint_template"`)}
	}
	if _, ok := bc.mutation.VariableTypes(); !ok {
		return &ValidationError{Name: "variable_types", err: errors.New(`ent: missing required field "Blueprint.variable_types"`)}
	}
	if _, ok := bc.mutation.ProviderID(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required edge "Blueprint.provider"`)}
	}
	if _, ok := bc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "Blueprint.project"`)}
	}
	return nil
}

func (bc *BlueprintCreate) sqlSave(ctx context.Context) (*Blueprint, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BlueprintCreate) createSpec() (*Blueprint, *sqlgraph.CreateSpec) {
	var (
		_node = &Blueprint{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(blueprint.Table, sqlgraph.NewFieldSpec(blueprint.FieldID, field.TypeUUID))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(blueprint.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(blueprint.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.SetField(blueprint.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bc.mutation.Description(); ok {
		_spec.SetField(blueprint.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := bc.mutation.BlueprintTemplate(); ok {
		_spec.SetField(blueprint.FieldBlueprintTemplate, field.TypeBytes, value)
		_node.BlueprintTemplate = value
	}
	if value, ok := bc.mutation.VariableTypes(); ok {
		_spec.SetField(blueprint.FieldVariableTypes, field.TypeJSON, value)
		_node.VariableTypes = value
	}
	if nodes := bc.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blueprint.ProviderTable,
			Columns: []string{blueprint.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entprovider.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.blueprint_provider = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blueprint.ProjectTable,
			Columns: []string{blueprint.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.blueprint_project = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   blueprint.ResourcesTable,
			Columns: []string{blueprint.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.DeploymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   blueprint.DeploymentsTable,
			Columns: []string{blueprint.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlueprintCreateBulk is the builder for creating many Blueprint entities in bulk.
type BlueprintCreateBulk struct {
	config
	err      error
	builders []*BlueprintCreate
}

// Save creates the Blueprint entities in the database.
func (bcb *BlueprintCreateBulk) Save(ctx context.Context) ([]*Blueprint, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Blueprint, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlueprintMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BlueprintCreateBulk) SaveX(ctx context.Context) []*Blueprint {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BlueprintCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BlueprintCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
