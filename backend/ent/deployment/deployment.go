// Code generated by ent, DO NOT EDIT.

package deployment

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the deployment type in the database.
	Label = "deployment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldLastAccessed holds the string denoting the last_accessed field in the database.
	FieldLastAccessed = "last_accessed"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldTemplateVars holds the string denoting the template_vars field in the database.
	FieldTemplateVars = "template_vars"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// EdgeBlueprint holds the string denoting the blueprint edge name in mutations.
	EdgeBlueprint = "blueprint"
	// EdgeDeploymentNodes holds the string denoting the deployment_nodes edge name in mutations.
	EdgeDeploymentNodes = "deployment_nodes"
	// EdgeRequester holds the string denoting the requester edge name in mutations.
	EdgeRequester = "requester"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// Table holds the table name of the deployment in the database.
	Table = "deployments"
	// BlueprintTable is the table that holds the blueprint relation/edge.
	BlueprintTable = "deployments"
	// BlueprintInverseTable is the table name for the Blueprint entity.
	// It exists in this package in order to avoid circular dependency with the "blueprint" package.
	BlueprintInverseTable = "blueprints"
	// BlueprintColumn is the table column denoting the blueprint relation/edge.
	BlueprintColumn = "deployment_blueprint"
	// DeploymentNodesTable is the table that holds the deployment_nodes relation/edge.
	DeploymentNodesTable = "deployment_nodes"
	// DeploymentNodesInverseTable is the table name for the DeploymentNode entity.
	// It exists in this package in order to avoid circular dependency with the "deploymentnode" package.
	DeploymentNodesInverseTable = "deployment_nodes"
	// DeploymentNodesColumn is the table column denoting the deployment_nodes relation/edge.
	DeploymentNodesColumn = "deployment_node_deployment"
	// RequesterTable is the table that holds the requester relation/edge.
	RequesterTable = "deployments"
	// RequesterInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	RequesterInverseTable = "users"
	// RequesterColumn is the table column denoting the requester relation/edge.
	RequesterColumn = "deployment_requester"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "deployments"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "deployment_project"
)

// Columns holds all SQL columns for deployment fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldLastAccessed,
	FieldName,
	FieldDescription,
	FieldState,
	FieldTemplateVars,
	FieldExpiresAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "deployments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"deployment_blueprint",
	"deployment_requester",
	"deployment_project",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultLastAccessed holds the default value on creation for the "last_accessed" field.
	DefaultLastAccessed func() time.Time
	// DefaultTemplateVars holds the default value on creation for the "template_vars" field.
	DefaultTemplateVars map[string]string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// State defines the type for the "state" enum field.
type State string

// State values.
const (
	StateAwaiting   State = "awaiting"
	StateInProgress State = "in_progress"
	StateComplete   State = "complete"
	StateFailed     State = "failed"
	StateDestroyed  State = "destroyed"
	StateSuspended  State = "suspended"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateAwaiting, StateInProgress, StateComplete, StateFailed, StateDestroyed, StateSuspended:
		return nil
	default:
		return fmt.Errorf("deployment: invalid enum value for state field: %q", s)
	}
}

// OrderOption defines the ordering options for the Deployment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByLastAccessed orders the results by the last_accessed field.
func ByLastAccessed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastAccessed, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByBlueprintField orders the results by blueprint field.
func ByBlueprintField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlueprintStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeploymentNodesCount orders the results by deployment_nodes count.
func ByDeploymentNodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeploymentNodesStep(), opts...)
	}
}

// ByDeploymentNodes orders the results by deployment_nodes terms.
func ByDeploymentNodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeploymentNodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRequesterField orders the results by requester field.
func ByRequesterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequesterStep(), sql.OrderByField(field, opts...))
	}
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}
func newBlueprintStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlueprintInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BlueprintTable, BlueprintColumn),
	)
}
func newDeploymentNodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeploymentNodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DeploymentNodesTable, DeploymentNodesColumn),
	)
}
func newRequesterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequesterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RequesterTable, RequesterColumn),
	)
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProjectTable, ProjectColumn),
	)
}
