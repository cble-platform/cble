// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cble-platform/cble-backend/ent/deployment"
	"github.com/cble-platform/cble-backend/ent/deploymentnode"
	"github.com/cble-platform/cble-backend/ent/predicate"
	"github.com/cble-platform/cble-backend/ent/resource"
	"github.com/google/uuid"
)

// DeploymentNodeQuery is the builder for querying DeploymentNode entities.
type DeploymentNodeQuery struct {
	config
	ctx            *QueryContext
	order          []deploymentnode.OrderOption
	inters         []Interceptor
	predicates     []predicate.DeploymentNode
	withDeployment *DeploymentQuery
	withResource   *ResourceQuery
	withPrevNodes  *DeploymentNodeQuery
	withNextNodes  *DeploymentNodeQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DeploymentNodeQuery builder.
func (dnq *DeploymentNodeQuery) Where(ps ...predicate.DeploymentNode) *DeploymentNodeQuery {
	dnq.predicates = append(dnq.predicates, ps...)
	return dnq
}

// Limit the number of records to be returned by this query.
func (dnq *DeploymentNodeQuery) Limit(limit int) *DeploymentNodeQuery {
	dnq.ctx.Limit = &limit
	return dnq
}

// Offset to start from.
func (dnq *DeploymentNodeQuery) Offset(offset int) *DeploymentNodeQuery {
	dnq.ctx.Offset = &offset
	return dnq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dnq *DeploymentNodeQuery) Unique(unique bool) *DeploymentNodeQuery {
	dnq.ctx.Unique = &unique
	return dnq
}

// Order specifies how the records should be ordered.
func (dnq *DeploymentNodeQuery) Order(o ...deploymentnode.OrderOption) *DeploymentNodeQuery {
	dnq.order = append(dnq.order, o...)
	return dnq
}

// QueryDeployment chains the current query on the "deployment" edge.
func (dnq *DeploymentNodeQuery) QueryDeployment() *DeploymentQuery {
	query := (&DeploymentClient{config: dnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentnode.Table, deploymentnode.FieldID, selector),
			sqlgraph.To(deployment.Table, deployment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deploymentnode.DeploymentTable, deploymentnode.DeploymentColumn),
		)
		fromU = sqlgraph.SetNeighbors(dnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryResource chains the current query on the "resource" edge.
func (dnq *DeploymentNodeQuery) QueryResource() *ResourceQuery {
	query := (&ResourceClient{config: dnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentnode.Table, deploymentnode.FieldID, selector),
			sqlgraph.To(resource.Table, resource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deploymentnode.ResourceTable, deploymentnode.ResourceColumn),
		)
		fromU = sqlgraph.SetNeighbors(dnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrevNodes chains the current query on the "prev_nodes" edge.
func (dnq *DeploymentNodeQuery) QueryPrevNodes() *DeploymentNodeQuery {
	query := (&DeploymentNodeClient{config: dnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentnode.Table, deploymentnode.FieldID, selector),
			sqlgraph.To(deploymentnode.Table, deploymentnode.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, deploymentnode.PrevNodesTable, deploymentnode.PrevNodesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNextNodes chains the current query on the "next_nodes" edge.
func (dnq *DeploymentNodeQuery) QueryNextNodes() *DeploymentNodeQuery {
	query := (&DeploymentNodeClient{config: dnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentnode.Table, deploymentnode.FieldID, selector),
			sqlgraph.To(deploymentnode.Table, deploymentnode.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deploymentnode.NextNodesTable, deploymentnode.NextNodesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(dnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DeploymentNode entity from the query.
// Returns a *NotFoundError when no DeploymentNode was found.
func (dnq *DeploymentNodeQuery) First(ctx context.Context) (*DeploymentNode, error) {
	nodes, err := dnq.Limit(1).All(setContextOp(ctx, dnq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{deploymentnode.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dnq *DeploymentNodeQuery) FirstX(ctx context.Context) *DeploymentNode {
	node, err := dnq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DeploymentNode ID from the query.
// Returns a *NotFoundError when no DeploymentNode ID was found.
func (dnq *DeploymentNodeQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dnq.Limit(1).IDs(setContextOp(ctx, dnq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{deploymentnode.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dnq *DeploymentNodeQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := dnq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DeploymentNode entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DeploymentNode entity is found.
// Returns a *NotFoundError when no DeploymentNode entities are found.
func (dnq *DeploymentNodeQuery) Only(ctx context.Context) (*DeploymentNode, error) {
	nodes, err := dnq.Limit(2).All(setContextOp(ctx, dnq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{deploymentnode.Label}
	default:
		return nil, &NotSingularError{deploymentnode.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dnq *DeploymentNodeQuery) OnlyX(ctx context.Context) *DeploymentNode {
	node, err := dnq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DeploymentNode ID in the query.
// Returns a *NotSingularError when more than one DeploymentNode ID is found.
// Returns a *NotFoundError when no entities are found.
func (dnq *DeploymentNodeQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dnq.Limit(2).IDs(setContextOp(ctx, dnq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{deploymentnode.Label}
	default:
		err = &NotSingularError{deploymentnode.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dnq *DeploymentNodeQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := dnq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DeploymentNodes.
func (dnq *DeploymentNodeQuery) All(ctx context.Context) ([]*DeploymentNode, error) {
	ctx = setContextOp(ctx, dnq.ctx, "All")
	if err := dnq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DeploymentNode, *DeploymentNodeQuery]()
	return withInterceptors[[]*DeploymentNode](ctx, dnq, qr, dnq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dnq *DeploymentNodeQuery) AllX(ctx context.Context) []*DeploymentNode {
	nodes, err := dnq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DeploymentNode IDs.
func (dnq *DeploymentNodeQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if dnq.ctx.Unique == nil && dnq.path != nil {
		dnq.Unique(true)
	}
	ctx = setContextOp(ctx, dnq.ctx, "IDs")
	if err = dnq.Select(deploymentnode.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dnq *DeploymentNodeQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := dnq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dnq *DeploymentNodeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dnq.ctx, "Count")
	if err := dnq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dnq, querierCount[*DeploymentNodeQuery](), dnq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dnq *DeploymentNodeQuery) CountX(ctx context.Context) int {
	count, err := dnq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dnq *DeploymentNodeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dnq.ctx, "Exist")
	switch _, err := dnq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dnq *DeploymentNodeQuery) ExistX(ctx context.Context) bool {
	exist, err := dnq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DeploymentNodeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dnq *DeploymentNodeQuery) Clone() *DeploymentNodeQuery {
	if dnq == nil {
		return nil
	}
	return &DeploymentNodeQuery{
		config:         dnq.config,
		ctx:            dnq.ctx.Clone(),
		order:          append([]deploymentnode.OrderOption{}, dnq.order...),
		inters:         append([]Interceptor{}, dnq.inters...),
		predicates:     append([]predicate.DeploymentNode{}, dnq.predicates...),
		withDeployment: dnq.withDeployment.Clone(),
		withResource:   dnq.withResource.Clone(),
		withPrevNodes:  dnq.withPrevNodes.Clone(),
		withNextNodes:  dnq.withNextNodes.Clone(),
		// clone intermediate query.
		sql:  dnq.sql.Clone(),
		path: dnq.path,
	}
}

// WithDeployment tells the query-builder to eager-load the nodes that are connected to
// the "deployment" edge. The optional arguments are used to configure the query builder of the edge.
func (dnq *DeploymentNodeQuery) WithDeployment(opts ...func(*DeploymentQuery)) *DeploymentNodeQuery {
	query := (&DeploymentClient{config: dnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dnq.withDeployment = query
	return dnq
}

// WithResource tells the query-builder to eager-load the nodes that are connected to
// the "resource" edge. The optional arguments are used to configure the query builder of the edge.
func (dnq *DeploymentNodeQuery) WithResource(opts ...func(*ResourceQuery)) *DeploymentNodeQuery {
	query := (&ResourceClient{config: dnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dnq.withResource = query
	return dnq
}

// WithPrevNodes tells the query-builder to eager-load the nodes that are connected to
// the "prev_nodes" edge. The optional arguments are used to configure the query builder of the edge.
func (dnq *DeploymentNodeQuery) WithPrevNodes(opts ...func(*DeploymentNodeQuery)) *DeploymentNodeQuery {
	query := (&DeploymentNodeClient{config: dnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dnq.withPrevNodes = query
	return dnq
}

// WithNextNodes tells the query-builder to eager-load the nodes that are connected to
// the "next_nodes" edge. The optional arguments are used to configure the query builder of the edge.
func (dnq *DeploymentNodeQuery) WithNextNodes(opts ...func(*DeploymentNodeQuery)) *DeploymentNodeQuery {
	query := (&DeploymentNodeClient{config: dnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dnq.withNextNodes = query
	return dnq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DeploymentNode.Query().
//		GroupBy(deploymentnode.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dnq *DeploymentNodeQuery) GroupBy(field string, fields ...string) *DeploymentNodeGroupBy {
	dnq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DeploymentNodeGroupBy{build: dnq}
	grbuild.flds = &dnq.ctx.Fields
	grbuild.label = deploymentnode.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.DeploymentNode.Query().
//		Select(deploymentnode.FieldCreatedAt).
//		Scan(ctx, &v)
func (dnq *DeploymentNodeQuery) Select(fields ...string) *DeploymentNodeSelect {
	dnq.ctx.Fields = append(dnq.ctx.Fields, fields...)
	sbuild := &DeploymentNodeSelect{DeploymentNodeQuery: dnq}
	sbuild.label = deploymentnode.Label
	sbuild.flds, sbuild.scan = &dnq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DeploymentNodeSelect configured with the given aggregations.
func (dnq *DeploymentNodeQuery) Aggregate(fns ...AggregateFunc) *DeploymentNodeSelect {
	return dnq.Select().Aggregate(fns...)
}

func (dnq *DeploymentNodeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dnq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dnq); err != nil {
				return err
			}
		}
	}
	for _, f := range dnq.ctx.Fields {
		if !deploymentnode.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dnq.path != nil {
		prev, err := dnq.path(ctx)
		if err != nil {
			return err
		}
		dnq.sql = prev
	}
	return nil
}

func (dnq *DeploymentNodeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DeploymentNode, error) {
	var (
		nodes       = []*DeploymentNode{}
		withFKs     = dnq.withFKs
		_spec       = dnq.querySpec()
		loadedTypes = [4]bool{
			dnq.withDeployment != nil,
			dnq.withResource != nil,
			dnq.withPrevNodes != nil,
			dnq.withNextNodes != nil,
		}
	)
	if dnq.withDeployment != nil || dnq.withResource != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, deploymentnode.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DeploymentNode).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DeploymentNode{config: dnq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dnq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dnq.withDeployment; query != nil {
		if err := dnq.loadDeployment(ctx, query, nodes, nil,
			func(n *DeploymentNode, e *Deployment) { n.Edges.Deployment = e }); err != nil {
			return nil, err
		}
	}
	if query := dnq.withResource; query != nil {
		if err := dnq.loadResource(ctx, query, nodes, nil,
			func(n *DeploymentNode, e *Resource) { n.Edges.Resource = e }); err != nil {
			return nil, err
		}
	}
	if query := dnq.withPrevNodes; query != nil {
		if err := dnq.loadPrevNodes(ctx, query, nodes,
			func(n *DeploymentNode) { n.Edges.PrevNodes = []*DeploymentNode{} },
			func(n *DeploymentNode, e *DeploymentNode) { n.Edges.PrevNodes = append(n.Edges.PrevNodes, e) }); err != nil {
			return nil, err
		}
	}
	if query := dnq.withNextNodes; query != nil {
		if err := dnq.loadNextNodes(ctx, query, nodes,
			func(n *DeploymentNode) { n.Edges.NextNodes = []*DeploymentNode{} },
			func(n *DeploymentNode, e *DeploymentNode) { n.Edges.NextNodes = append(n.Edges.NextNodes, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dnq *DeploymentNodeQuery) loadDeployment(ctx context.Context, query *DeploymentQuery, nodes []*DeploymentNode, init func(*DeploymentNode), assign func(*DeploymentNode, *Deployment)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*DeploymentNode)
	for i := range nodes {
		if nodes[i].deployment_node_deployment == nil {
			continue
		}
		fk := *nodes[i].deployment_node_deployment
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(deployment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "deployment_node_deployment" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dnq *DeploymentNodeQuery) loadResource(ctx context.Context, query *ResourceQuery, nodes []*DeploymentNode, init func(*DeploymentNode), assign func(*DeploymentNode, *Resource)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*DeploymentNode)
	for i := range nodes {
		if nodes[i].deployment_node_resource == nil {
			continue
		}
		fk := *nodes[i].deployment_node_resource
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(resource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "deployment_node_resource" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dnq *DeploymentNodeQuery) loadPrevNodes(ctx context.Context, query *DeploymentNodeQuery, nodes []*DeploymentNode, init func(*DeploymentNode), assign func(*DeploymentNode, *DeploymentNode)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*DeploymentNode)
	nids := make(map[uuid.UUID]map[*DeploymentNode]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(deploymentnode.PrevNodesTable)
		s.Join(joinT).On(s.C(deploymentnode.FieldID), joinT.C(deploymentnode.PrevNodesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(deploymentnode.PrevNodesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(deploymentnode.PrevNodesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*DeploymentNode]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DeploymentNode](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "prev_nodes" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (dnq *DeploymentNodeQuery) loadNextNodes(ctx context.Context, query *DeploymentNodeQuery, nodes []*DeploymentNode, init func(*DeploymentNode), assign func(*DeploymentNode, *DeploymentNode)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*DeploymentNode)
	nids := make(map[uuid.UUID]map[*DeploymentNode]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(deploymentnode.NextNodesTable)
		s.Join(joinT).On(s.C(deploymentnode.FieldID), joinT.C(deploymentnode.NextNodesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(deploymentnode.NextNodesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(deploymentnode.NextNodesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*DeploymentNode]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DeploymentNode](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "next_nodes" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (dnq *DeploymentNodeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dnq.querySpec()
	_spec.Node.Columns = dnq.ctx.Fields
	if len(dnq.ctx.Fields) > 0 {
		_spec.Unique = dnq.ctx.Unique != nil && *dnq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dnq.driver, _spec)
}

func (dnq *DeploymentNodeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(deploymentnode.Table, deploymentnode.Columns, sqlgraph.NewFieldSpec(deploymentnode.FieldID, field.TypeUUID))
	_spec.From = dnq.sql
	if unique := dnq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dnq.path != nil {
		_spec.Unique = true
	}
	if fields := dnq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deploymentnode.FieldID)
		for i := range fields {
			if fields[i] != deploymentnode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := dnq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dnq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dnq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dnq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dnq *DeploymentNodeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dnq.driver.Dialect())
	t1 := builder.Table(deploymentnode.Table)
	columns := dnq.ctx.Fields
	if len(columns) == 0 {
		columns = deploymentnode.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dnq.sql != nil {
		selector = dnq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dnq.ctx.Unique != nil && *dnq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range dnq.predicates {
		p(selector)
	}
	for _, p := range dnq.order {
		p(selector)
	}
	if offset := dnq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dnq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DeploymentNodeGroupBy is the group-by builder for DeploymentNode entities.
type DeploymentNodeGroupBy struct {
	selector
	build *DeploymentNodeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dngb *DeploymentNodeGroupBy) Aggregate(fns ...AggregateFunc) *DeploymentNodeGroupBy {
	dngb.fns = append(dngb.fns, fns...)
	return dngb
}

// Scan applies the selector query and scans the result into the given value.
func (dngb *DeploymentNodeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dngb.build.ctx, "GroupBy")
	if err := dngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeploymentNodeQuery, *DeploymentNodeGroupBy](ctx, dngb.build, dngb, dngb.build.inters, v)
}

func (dngb *DeploymentNodeGroupBy) sqlScan(ctx context.Context, root *DeploymentNodeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dngb.fns))
	for _, fn := range dngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dngb.flds)+len(dngb.fns))
		for _, f := range *dngb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dngb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dngb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DeploymentNodeSelect is the builder for selecting fields of DeploymentNode entities.
type DeploymentNodeSelect struct {
	*DeploymentNodeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dns *DeploymentNodeSelect) Aggregate(fns ...AggregateFunc) *DeploymentNodeSelect {
	dns.fns = append(dns.fns, fns...)
	return dns
}

// Scan applies the selector query and scans the result into the given value.
func (dns *DeploymentNodeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dns.ctx, "Select")
	if err := dns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeploymentNodeQuery, *DeploymentNodeSelect](ctx, dns.DeploymentNodeQuery, dns, dns.inters, v)
}

func (dns *DeploymentNodeSelect) sqlScan(ctx context.Context, root *DeploymentNodeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dns.fns))
	for _, fn := range dns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
