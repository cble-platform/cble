// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cble-platform/cble/backend/ent/blueprint"
	"github.com/cble-platform/cble/backend/ent/deployment"
	"github.com/cble-platform/cble/backend/ent/group"
	"github.com/cble-platform/cble/backend/ent/predicate"
	"github.com/cble-platform/cble/backend/ent/project"
	"github.com/cble-platform/cble/backend/ent/user"
	"github.com/google/uuid"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProjectUpdate) SetUpdatedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetName sets the "name" field.
func (pu *ProjectUpdate) SetName(s string) *ProjectUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableName(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetQuotaCPU sets the "quota_cpu" field.
func (pu *ProjectUpdate) SetQuotaCPU(i int) *ProjectUpdate {
	pu.mutation.ResetQuotaCPU()
	pu.mutation.SetQuotaCPU(i)
	return pu
}

// SetNillableQuotaCPU sets the "quota_cpu" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableQuotaCPU(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetQuotaCPU(*i)
	}
	return pu
}

// AddQuotaCPU adds i to the "quota_cpu" field.
func (pu *ProjectUpdate) AddQuotaCPU(i int) *ProjectUpdate {
	pu.mutation.AddQuotaCPU(i)
	return pu
}

// SetUsageCPU sets the "usage_cpu" field.
func (pu *ProjectUpdate) SetUsageCPU(i int) *ProjectUpdate {
	pu.mutation.ResetUsageCPU()
	pu.mutation.SetUsageCPU(i)
	return pu
}

// SetNillableUsageCPU sets the "usage_cpu" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUsageCPU(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetUsageCPU(*i)
	}
	return pu
}

// AddUsageCPU adds i to the "usage_cpu" field.
func (pu *ProjectUpdate) AddUsageCPU(i int) *ProjectUpdate {
	pu.mutation.AddUsageCPU(i)
	return pu
}

// SetQuotaRAM sets the "quota_ram" field.
func (pu *ProjectUpdate) SetQuotaRAM(i int) *ProjectUpdate {
	pu.mutation.ResetQuotaRAM()
	pu.mutation.SetQuotaRAM(i)
	return pu
}

// SetNillableQuotaRAM sets the "quota_ram" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableQuotaRAM(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetQuotaRAM(*i)
	}
	return pu
}

// AddQuotaRAM adds i to the "quota_ram" field.
func (pu *ProjectUpdate) AddQuotaRAM(i int) *ProjectUpdate {
	pu.mutation.AddQuotaRAM(i)
	return pu
}

// SetUsageRAM sets the "usage_ram" field.
func (pu *ProjectUpdate) SetUsageRAM(i int) *ProjectUpdate {
	pu.mutation.ResetUsageRAM()
	pu.mutation.SetUsageRAM(i)
	return pu
}

// SetNillableUsageRAM sets the "usage_ram" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUsageRAM(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetUsageRAM(*i)
	}
	return pu
}

// AddUsageRAM adds i to the "usage_ram" field.
func (pu *ProjectUpdate) AddUsageRAM(i int) *ProjectUpdate {
	pu.mutation.AddUsageRAM(i)
	return pu
}

// SetQuotaDisk sets the "quota_disk" field.
func (pu *ProjectUpdate) SetQuotaDisk(i int) *ProjectUpdate {
	pu.mutation.ResetQuotaDisk()
	pu.mutation.SetQuotaDisk(i)
	return pu
}

// SetNillableQuotaDisk sets the "quota_disk" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableQuotaDisk(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetQuotaDisk(*i)
	}
	return pu
}

// AddQuotaDisk adds i to the "quota_disk" field.
func (pu *ProjectUpdate) AddQuotaDisk(i int) *ProjectUpdate {
	pu.mutation.AddQuotaDisk(i)
	return pu
}

// SetUsageDisk sets the "usage_disk" field.
func (pu *ProjectUpdate) SetUsageDisk(i int) *ProjectUpdate {
	pu.mutation.ResetUsageDisk()
	pu.mutation.SetUsageDisk(i)
	return pu
}

// SetNillableUsageDisk sets the "usage_disk" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUsageDisk(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetUsageDisk(*i)
	}
	return pu
}

// AddUsageDisk adds i to the "usage_disk" field.
func (pu *ProjectUpdate) AddUsageDisk(i int) *ProjectUpdate {
	pu.mutation.AddUsageDisk(i)
	return pu
}

// SetQuotaNetwork sets the "quota_network" field.
func (pu *ProjectUpdate) SetQuotaNetwork(i int) *ProjectUpdate {
	pu.mutation.ResetQuotaNetwork()
	pu.mutation.SetQuotaNetwork(i)
	return pu
}

// SetNillableQuotaNetwork sets the "quota_network" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableQuotaNetwork(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetQuotaNetwork(*i)
	}
	return pu
}

// AddQuotaNetwork adds i to the "quota_network" field.
func (pu *ProjectUpdate) AddQuotaNetwork(i int) *ProjectUpdate {
	pu.mutation.AddQuotaNetwork(i)
	return pu
}

// SetUsageNetwork sets the "usage_network" field.
func (pu *ProjectUpdate) SetUsageNetwork(i int) *ProjectUpdate {
	pu.mutation.ResetUsageNetwork()
	pu.mutation.SetUsageNetwork(i)
	return pu
}

// SetNillableUsageNetwork sets the "usage_network" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUsageNetwork(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetUsageNetwork(*i)
	}
	return pu
}

// AddUsageNetwork adds i to the "usage_network" field.
func (pu *ProjectUpdate) AddUsageNetwork(i int) *ProjectUpdate {
	pu.mutation.AddUsageNetwork(i)
	return pu
}

// SetQuotaRouter sets the "quota_router" field.
func (pu *ProjectUpdate) SetQuotaRouter(i int) *ProjectUpdate {
	pu.mutation.ResetQuotaRouter()
	pu.mutation.SetQuotaRouter(i)
	return pu
}

// SetNillableQuotaRouter sets the "quota_router" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableQuotaRouter(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetQuotaRouter(*i)
	}
	return pu
}

// AddQuotaRouter adds i to the "quota_router" field.
func (pu *ProjectUpdate) AddQuotaRouter(i int) *ProjectUpdate {
	pu.mutation.AddQuotaRouter(i)
	return pu
}

// SetUsageRouter sets the "usage_router" field.
func (pu *ProjectUpdate) SetUsageRouter(i int) *ProjectUpdate {
	pu.mutation.ResetUsageRouter()
	pu.mutation.SetUsageRouter(i)
	return pu
}

// SetNillableUsageRouter sets the "usage_router" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUsageRouter(i *int) *ProjectUpdate {
	if i != nil {
		pu.SetUsageRouter(*i)
	}
	return pu
}

// AddUsageRouter adds i to the "usage_router" field.
func (pu *ProjectUpdate) AddUsageRouter(i int) *ProjectUpdate {
	pu.mutation.AddUsageRouter(i)
	return pu
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (pu *ProjectUpdate) AddMemberIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddMemberIDs(ids...)
	return pu
}

// AddMembers adds the "members" edges to the User entity.
func (pu *ProjectUpdate) AddMembers(u ...*User) *ProjectUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddMemberIDs(ids...)
}

// AddGroupMemberIDs adds the "group_members" edge to the Group entity by IDs.
func (pu *ProjectUpdate) AddGroupMemberIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddGroupMemberIDs(ids...)
	return pu
}

// AddGroupMembers adds the "group_members" edges to the Group entity.
func (pu *ProjectUpdate) AddGroupMembers(g ...*Group) *ProjectUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pu.AddGroupMemberIDs(ids...)
}

// AddBlueprintIDs adds the "blueprints" edge to the Blueprint entity by IDs.
func (pu *ProjectUpdate) AddBlueprintIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddBlueprintIDs(ids...)
	return pu
}

// AddBlueprints adds the "blueprints" edges to the Blueprint entity.
func (pu *ProjectUpdate) AddBlueprints(b ...*Blueprint) *ProjectUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddBlueprintIDs(ids...)
}

// AddDeploymentIDs adds the "deployments" edge to the Deployment entity by IDs.
func (pu *ProjectUpdate) AddDeploymentIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddDeploymentIDs(ids...)
	return pu
}

// AddDeployments adds the "deployments" edges to the Deployment entity.
func (pu *ProjectUpdate) AddDeployments(d ...*Deployment) *ProjectUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDeploymentIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearMembers clears all "members" edges to the User entity.
func (pu *ProjectUpdate) ClearMembers() *ProjectUpdate {
	pu.mutation.ClearMembers()
	return pu
}

// RemoveMemberIDs removes the "members" edge to User entities by IDs.
func (pu *ProjectUpdate) RemoveMemberIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveMemberIDs(ids...)
	return pu
}

// RemoveMembers removes "members" edges to User entities.
func (pu *ProjectUpdate) RemoveMembers(u ...*User) *ProjectUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveMemberIDs(ids...)
}

// ClearGroupMembers clears all "group_members" edges to the Group entity.
func (pu *ProjectUpdate) ClearGroupMembers() *ProjectUpdate {
	pu.mutation.ClearGroupMembers()
	return pu
}

// RemoveGroupMemberIDs removes the "group_members" edge to Group entities by IDs.
func (pu *ProjectUpdate) RemoveGroupMemberIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveGroupMemberIDs(ids...)
	return pu
}

// RemoveGroupMembers removes "group_members" edges to Group entities.
func (pu *ProjectUpdate) RemoveGroupMembers(g ...*Group) *ProjectUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pu.RemoveGroupMemberIDs(ids...)
}

// ClearBlueprints clears all "blueprints" edges to the Blueprint entity.
func (pu *ProjectUpdate) ClearBlueprints() *ProjectUpdate {
	pu.mutation.ClearBlueprints()
	return pu
}

// RemoveBlueprintIDs removes the "blueprints" edge to Blueprint entities by IDs.
func (pu *ProjectUpdate) RemoveBlueprintIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveBlueprintIDs(ids...)
	return pu
}

// RemoveBlueprints removes "blueprints" edges to Blueprint entities.
func (pu *ProjectUpdate) RemoveBlueprints(b ...*Blueprint) *ProjectUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemoveBlueprintIDs(ids...)
}

// ClearDeployments clears all "deployments" edges to the Deployment entity.
func (pu *ProjectUpdate) ClearDeployments() *ProjectUpdate {
	pu.mutation.ClearDeployments()
	return pu
}

// RemoveDeploymentIDs removes the "deployments" edge to Deployment entities by IDs.
func (pu *ProjectUpdate) RemoveDeploymentIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveDeploymentIDs(ids...)
	return pu
}

// RemoveDeployments removes "deployments" edges to Deployment entities.
func (pu *ProjectUpdate) RemoveDeployments(d ...*Deployment) *ProjectUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDeploymentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProjectUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.QuotaCPU(); ok {
		_spec.SetField(project.FieldQuotaCPU, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedQuotaCPU(); ok {
		_spec.AddField(project.FieldQuotaCPU, field.TypeInt, value)
	}
	if value, ok := pu.mutation.UsageCPU(); ok {
		_spec.SetField(project.FieldUsageCPU, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedUsageCPU(); ok {
		_spec.AddField(project.FieldUsageCPU, field.TypeInt, value)
	}
	if value, ok := pu.mutation.QuotaRAM(); ok {
		_spec.SetField(project.FieldQuotaRAM, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedQuotaRAM(); ok {
		_spec.AddField(project.FieldQuotaRAM, field.TypeInt, value)
	}
	if value, ok := pu.mutation.UsageRAM(); ok {
		_spec.SetField(project.FieldUsageRAM, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedUsageRAM(); ok {
		_spec.AddField(project.FieldUsageRAM, field.TypeInt, value)
	}
	if value, ok := pu.mutation.QuotaDisk(); ok {
		_spec.SetField(project.FieldQuotaDisk, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedQuotaDisk(); ok {
		_spec.AddField(project.FieldQuotaDisk, field.TypeInt, value)
	}
	if value, ok := pu.mutation.UsageDisk(); ok {
		_spec.SetField(project.FieldUsageDisk, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedUsageDisk(); ok {
		_spec.AddField(project.FieldUsageDisk, field.TypeInt, value)
	}
	if value, ok := pu.mutation.QuotaNetwork(); ok {
		_spec.SetField(project.FieldQuotaNetwork, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedQuotaNetwork(); ok {
		_spec.AddField(project.FieldQuotaNetwork, field.TypeInt, value)
	}
	if value, ok := pu.mutation.UsageNetwork(); ok {
		_spec.SetField(project.FieldUsageNetwork, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedUsageNetwork(); ok {
		_spec.AddField(project.FieldUsageNetwork, field.TypeInt, value)
	}
	if value, ok := pu.mutation.QuotaRouter(); ok {
		_spec.SetField(project.FieldQuotaRouter, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedQuotaRouter(); ok {
		_spec.AddField(project.FieldQuotaRouter, field.TypeInt, value)
	}
	if value, ok := pu.mutation.UsageRouter(); ok {
		_spec.SetField(project.FieldUsageRouter, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedUsageRouter(); ok {
		_spec.AddField(project.FieldUsageRouter, field.TypeInt, value)
	}
	if pu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: project.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		createE := &MembershipCreate{config: pu.config, mutation: newMembershipMutation(pu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMembersIDs(); len(nodes) > 0 && !pu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: project.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &MembershipCreate{config: pu.config, mutation: newMembershipMutation(pu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: project.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &MembershipCreate{config: pu.config, mutation: newMembershipMutation(pu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.GroupMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.GroupMembersTable,
			Columns: project.GroupMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		createE := &GroupMembershipCreate{config: pu.config, mutation: newGroupMembershipMutation(pu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedGroupMembersIDs(); len(nodes) > 0 && !pu.mutation.GroupMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.GroupMembersTable,
			Columns: project.GroupMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: pu.config, mutation: newGroupMembershipMutation(pu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.GroupMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.GroupMembersTable,
			Columns: project.GroupMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: pu.config, mutation: newGroupMembershipMutation(pu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.BlueprintsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.BlueprintsTable,
			Columns: []string{project.BlueprintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blueprint.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedBlueprintsIDs(); len(nodes) > 0 && !pu.mutation.BlueprintsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.BlueprintsTable,
			Columns: []string{project.BlueprintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blueprint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BlueprintsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.BlueprintsTable,
			Columns: []string{project.BlueprintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blueprint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DeploymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.DeploymentsTable,
			Columns: []string{project.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDeploymentsIDs(); len(nodes) > 0 && !pu.mutation.DeploymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.DeploymentsTable,
			Columns: []string{project.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DeploymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.DeploymentsTable,
			Columns: []string{project.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProjectUpdateOne) SetUpdatedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetName sets the "name" field.
func (puo *ProjectUpdateOne) SetName(s string) *ProjectUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableName(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetQuotaCPU sets the "quota_cpu" field.
func (puo *ProjectUpdateOne) SetQuotaCPU(i int) *ProjectUpdateOne {
	puo.mutation.ResetQuotaCPU()
	puo.mutation.SetQuotaCPU(i)
	return puo
}

// SetNillableQuotaCPU sets the "quota_cpu" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableQuotaCPU(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetQuotaCPU(*i)
	}
	return puo
}

// AddQuotaCPU adds i to the "quota_cpu" field.
func (puo *ProjectUpdateOne) AddQuotaCPU(i int) *ProjectUpdateOne {
	puo.mutation.AddQuotaCPU(i)
	return puo
}

// SetUsageCPU sets the "usage_cpu" field.
func (puo *ProjectUpdateOne) SetUsageCPU(i int) *ProjectUpdateOne {
	puo.mutation.ResetUsageCPU()
	puo.mutation.SetUsageCPU(i)
	return puo
}

// SetNillableUsageCPU sets the "usage_cpu" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUsageCPU(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetUsageCPU(*i)
	}
	return puo
}

// AddUsageCPU adds i to the "usage_cpu" field.
func (puo *ProjectUpdateOne) AddUsageCPU(i int) *ProjectUpdateOne {
	puo.mutation.AddUsageCPU(i)
	return puo
}

// SetQuotaRAM sets the "quota_ram" field.
func (puo *ProjectUpdateOne) SetQuotaRAM(i int) *ProjectUpdateOne {
	puo.mutation.ResetQuotaRAM()
	puo.mutation.SetQuotaRAM(i)
	return puo
}

// SetNillableQuotaRAM sets the "quota_ram" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableQuotaRAM(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetQuotaRAM(*i)
	}
	return puo
}

// AddQuotaRAM adds i to the "quota_ram" field.
func (puo *ProjectUpdateOne) AddQuotaRAM(i int) *ProjectUpdateOne {
	puo.mutation.AddQuotaRAM(i)
	return puo
}

// SetUsageRAM sets the "usage_ram" field.
func (puo *ProjectUpdateOne) SetUsageRAM(i int) *ProjectUpdateOne {
	puo.mutation.ResetUsageRAM()
	puo.mutation.SetUsageRAM(i)
	return puo
}

// SetNillableUsageRAM sets the "usage_ram" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUsageRAM(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetUsageRAM(*i)
	}
	return puo
}

// AddUsageRAM adds i to the "usage_ram" field.
func (puo *ProjectUpdateOne) AddUsageRAM(i int) *ProjectUpdateOne {
	puo.mutation.AddUsageRAM(i)
	return puo
}

// SetQuotaDisk sets the "quota_disk" field.
func (puo *ProjectUpdateOne) SetQuotaDisk(i int) *ProjectUpdateOne {
	puo.mutation.ResetQuotaDisk()
	puo.mutation.SetQuotaDisk(i)
	return puo
}

// SetNillableQuotaDisk sets the "quota_disk" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableQuotaDisk(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetQuotaDisk(*i)
	}
	return puo
}

// AddQuotaDisk adds i to the "quota_disk" field.
func (puo *ProjectUpdateOne) AddQuotaDisk(i int) *ProjectUpdateOne {
	puo.mutation.AddQuotaDisk(i)
	return puo
}

// SetUsageDisk sets the "usage_disk" field.
func (puo *ProjectUpdateOne) SetUsageDisk(i int) *ProjectUpdateOne {
	puo.mutation.ResetUsageDisk()
	puo.mutation.SetUsageDisk(i)
	return puo
}

// SetNillableUsageDisk sets the "usage_disk" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUsageDisk(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetUsageDisk(*i)
	}
	return puo
}

// AddUsageDisk adds i to the "usage_disk" field.
func (puo *ProjectUpdateOne) AddUsageDisk(i int) *ProjectUpdateOne {
	puo.mutation.AddUsageDisk(i)
	return puo
}

// SetQuotaNetwork sets the "quota_network" field.
func (puo *ProjectUpdateOne) SetQuotaNetwork(i int) *ProjectUpdateOne {
	puo.mutation.ResetQuotaNetwork()
	puo.mutation.SetQuotaNetwork(i)
	return puo
}

// SetNillableQuotaNetwork sets the "quota_network" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableQuotaNetwork(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetQuotaNetwork(*i)
	}
	return puo
}

// AddQuotaNetwork adds i to the "quota_network" field.
func (puo *ProjectUpdateOne) AddQuotaNetwork(i int) *ProjectUpdateOne {
	puo.mutation.AddQuotaNetwork(i)
	return puo
}

// SetUsageNetwork sets the "usage_network" field.
func (puo *ProjectUpdateOne) SetUsageNetwork(i int) *ProjectUpdateOne {
	puo.mutation.ResetUsageNetwork()
	puo.mutation.SetUsageNetwork(i)
	return puo
}

// SetNillableUsageNetwork sets the "usage_network" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUsageNetwork(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetUsageNetwork(*i)
	}
	return puo
}

// AddUsageNetwork adds i to the "usage_network" field.
func (puo *ProjectUpdateOne) AddUsageNetwork(i int) *ProjectUpdateOne {
	puo.mutation.AddUsageNetwork(i)
	return puo
}

// SetQuotaRouter sets the "quota_router" field.
func (puo *ProjectUpdateOne) SetQuotaRouter(i int) *ProjectUpdateOne {
	puo.mutation.ResetQuotaRouter()
	puo.mutation.SetQuotaRouter(i)
	return puo
}

// SetNillableQuotaRouter sets the "quota_router" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableQuotaRouter(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetQuotaRouter(*i)
	}
	return puo
}

// AddQuotaRouter adds i to the "quota_router" field.
func (puo *ProjectUpdateOne) AddQuotaRouter(i int) *ProjectUpdateOne {
	puo.mutation.AddQuotaRouter(i)
	return puo
}

// SetUsageRouter sets the "usage_router" field.
func (puo *ProjectUpdateOne) SetUsageRouter(i int) *ProjectUpdateOne {
	puo.mutation.ResetUsageRouter()
	puo.mutation.SetUsageRouter(i)
	return puo
}

// SetNillableUsageRouter sets the "usage_router" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUsageRouter(i *int) *ProjectUpdateOne {
	if i != nil {
		puo.SetUsageRouter(*i)
	}
	return puo
}

// AddUsageRouter adds i to the "usage_router" field.
func (puo *ProjectUpdateOne) AddUsageRouter(i int) *ProjectUpdateOne {
	puo.mutation.AddUsageRouter(i)
	return puo
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (puo *ProjectUpdateOne) AddMemberIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddMemberIDs(ids...)
	return puo
}

// AddMembers adds the "members" edges to the User entity.
func (puo *ProjectUpdateOne) AddMembers(u ...*User) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddMemberIDs(ids...)
}

// AddGroupMemberIDs adds the "group_members" edge to the Group entity by IDs.
func (puo *ProjectUpdateOne) AddGroupMemberIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddGroupMemberIDs(ids...)
	return puo
}

// AddGroupMembers adds the "group_members" edges to the Group entity.
func (puo *ProjectUpdateOne) AddGroupMembers(g ...*Group) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return puo.AddGroupMemberIDs(ids...)
}

// AddBlueprintIDs adds the "blueprints" edge to the Blueprint entity by IDs.
func (puo *ProjectUpdateOne) AddBlueprintIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddBlueprintIDs(ids...)
	return puo
}

// AddBlueprints adds the "blueprints" edges to the Blueprint entity.
func (puo *ProjectUpdateOne) AddBlueprints(b ...*Blueprint) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddBlueprintIDs(ids...)
}

// AddDeploymentIDs adds the "deployments" edge to the Deployment entity by IDs.
func (puo *ProjectUpdateOne) AddDeploymentIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddDeploymentIDs(ids...)
	return puo
}

// AddDeployments adds the "deployments" edges to the Deployment entity.
func (puo *ProjectUpdateOne) AddDeployments(d ...*Deployment) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDeploymentIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearMembers clears all "members" edges to the User entity.
func (puo *ProjectUpdateOne) ClearMembers() *ProjectUpdateOne {
	puo.mutation.ClearMembers()
	return puo
}

// RemoveMemberIDs removes the "members" edge to User entities by IDs.
func (puo *ProjectUpdateOne) RemoveMemberIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveMemberIDs(ids...)
	return puo
}

// RemoveMembers removes "members" edges to User entities.
func (puo *ProjectUpdateOne) RemoveMembers(u ...*User) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveMemberIDs(ids...)
}

// ClearGroupMembers clears all "group_members" edges to the Group entity.
func (puo *ProjectUpdateOne) ClearGroupMembers() *ProjectUpdateOne {
	puo.mutation.ClearGroupMembers()
	return puo
}

// RemoveGroupMemberIDs removes the "group_members" edge to Group entities by IDs.
func (puo *ProjectUpdateOne) RemoveGroupMemberIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveGroupMemberIDs(ids...)
	return puo
}

// RemoveGroupMembers removes "group_members" edges to Group entities.
func (puo *ProjectUpdateOne) RemoveGroupMembers(g ...*Group) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return puo.RemoveGroupMemberIDs(ids...)
}

// ClearBlueprints clears all "blueprints" edges to the Blueprint entity.
func (puo *ProjectUpdateOne) ClearBlueprints() *ProjectUpdateOne {
	puo.mutation.ClearBlueprints()
	return puo
}

// RemoveBlueprintIDs removes the "blueprints" edge to Blueprint entities by IDs.
func (puo *ProjectUpdateOne) RemoveBlueprintIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveBlueprintIDs(ids...)
	return puo
}

// RemoveBlueprints removes "blueprints" edges to Blueprint entities.
func (puo *ProjectUpdateOne) RemoveBlueprints(b ...*Blueprint) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemoveBlueprintIDs(ids...)
}

// ClearDeployments clears all "deployments" edges to the Deployment entity.
func (puo *ProjectUpdateOne) ClearDeployments() *ProjectUpdateOne {
	puo.mutation.ClearDeployments()
	return puo
}

// RemoveDeploymentIDs removes the "deployments" edge to Deployment entities by IDs.
func (puo *ProjectUpdateOne) RemoveDeploymentIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveDeploymentIDs(ids...)
	return puo
}

// RemoveDeployments removes "deployments" edges to Deployment entities.
func (puo *ProjectUpdateOne) RemoveDeployments(d ...*Deployment) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDeploymentIDs(ids...)
}

// Where appends a list predicates to the ProjectUpdate builder.
func (puo *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProjectUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.QuotaCPU(); ok {
		_spec.SetField(project.FieldQuotaCPU, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedQuotaCPU(); ok {
		_spec.AddField(project.FieldQuotaCPU, field.TypeInt, value)
	}
	if value, ok := puo.mutation.UsageCPU(); ok {
		_spec.SetField(project.FieldUsageCPU, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedUsageCPU(); ok {
		_spec.AddField(project.FieldUsageCPU, field.TypeInt, value)
	}
	if value, ok := puo.mutation.QuotaRAM(); ok {
		_spec.SetField(project.FieldQuotaRAM, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedQuotaRAM(); ok {
		_spec.AddField(project.FieldQuotaRAM, field.TypeInt, value)
	}
	if value, ok := puo.mutation.UsageRAM(); ok {
		_spec.SetField(project.FieldUsageRAM, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedUsageRAM(); ok {
		_spec.AddField(project.FieldUsageRAM, field.TypeInt, value)
	}
	if value, ok := puo.mutation.QuotaDisk(); ok {
		_spec.SetField(project.FieldQuotaDisk, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedQuotaDisk(); ok {
		_spec.AddField(project.FieldQuotaDisk, field.TypeInt, value)
	}
	if value, ok := puo.mutation.UsageDisk(); ok {
		_spec.SetField(project.FieldUsageDisk, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedUsageDisk(); ok {
		_spec.AddField(project.FieldUsageDisk, field.TypeInt, value)
	}
	if value, ok := puo.mutation.QuotaNetwork(); ok {
		_spec.SetField(project.FieldQuotaNetwork, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedQuotaNetwork(); ok {
		_spec.AddField(project.FieldQuotaNetwork, field.TypeInt, value)
	}
	if value, ok := puo.mutation.UsageNetwork(); ok {
		_spec.SetField(project.FieldUsageNetwork, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedUsageNetwork(); ok {
		_spec.AddField(project.FieldUsageNetwork, field.TypeInt, value)
	}
	if value, ok := puo.mutation.QuotaRouter(); ok {
		_spec.SetField(project.FieldQuotaRouter, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedQuotaRouter(); ok {
		_spec.AddField(project.FieldQuotaRouter, field.TypeInt, value)
	}
	if value, ok := puo.mutation.UsageRouter(); ok {
		_spec.SetField(project.FieldUsageRouter, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedUsageRouter(); ok {
		_spec.AddField(project.FieldUsageRouter, field.TypeInt, value)
	}
	if puo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: project.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		createE := &MembershipCreate{config: puo.config, mutation: newMembershipMutation(puo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !puo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: project.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &MembershipCreate{config: puo.config, mutation: newMembershipMutation(puo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.MembersTable,
			Columns: project.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &MembershipCreate{config: puo.config, mutation: newMembershipMutation(puo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.GroupMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.GroupMembersTable,
			Columns: project.GroupMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		createE := &GroupMembershipCreate{config: puo.config, mutation: newGroupMembershipMutation(puo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedGroupMembersIDs(); len(nodes) > 0 && !puo.mutation.GroupMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.GroupMembersTable,
			Columns: project.GroupMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: puo.config, mutation: newGroupMembershipMutation(puo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.GroupMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.GroupMembersTable,
			Columns: project.GroupMembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: puo.config, mutation: newGroupMembershipMutation(puo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.BlueprintsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.BlueprintsTable,
			Columns: []string{project.BlueprintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blueprint.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedBlueprintsIDs(); len(nodes) > 0 && !puo.mutation.BlueprintsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.BlueprintsTable,
			Columns: []string{project.BlueprintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blueprint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BlueprintsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.BlueprintsTable,
			Columns: []string{project.BlueprintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blueprint.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DeploymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.DeploymentsTable,
			Columns: []string{project.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDeploymentsIDs(); len(nodes) > 0 && !puo.mutation.DeploymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.DeploymentsTable,
			Columns: []string{project.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DeploymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.DeploymentsTable,
			Columns: []string{project.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
