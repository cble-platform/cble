// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/cble-platform/cble/backend/engine/models"
	"github.com/cble-platform/cble/backend/ent"
	"github.com/cble-platform/cble/backend/ent/groupmembership"
	"github.com/cble-platform/cble/backend/ent/membership"
	"github.com/google/uuid"
)

type BlueprintInput struct {
	Name              string                                  `json:"name"`
	Description       string                                  `json:"description"`
	BlueprintTemplate string                                  `json:"blueprintTemplate"`
	VariableTypes     map[string]models.BlueprintVariableType `json:"variableTypes"`
	ProviderID        uuid.UUID                               `json:"providerId"`
	ProjectID         uuid.UUID                               `json:"projectId"`
}

type BlueprintPage struct {
	Blueprints []*ent.Blueprint `json:"blueprints"`
	Total      int              `json:"total"`
}

type DeploymentInput struct {
	Name string `json:"name"`
}

type DeploymentPage struct {
	Deployments []*ent.Deployment `json:"deployments"`
	Total       int               `json:"total"`
}

type GrantedPermissionPage struct {
	Permissions []*ent.GrantedPermission `json:"permissions"`
	Total       int                      `json:"total"`
}

type GroupInput struct {
	Name string `json:"name"`
}

type GroupMembershipInput struct {
	GroupID uuid.UUID            `json:"groupID"`
	Role    groupmembership.Role `json:"role"`
}

type GroupPage struct {
	Groups []*ent.Group `json:"groups"`
	Total  int          `json:"total"`
}

type MembershipInput struct {
	UserID uuid.UUID       `json:"userID"`
	Role   membership.Role `json:"role"`
}

type ProjectInput struct {
	Name string `json:"name"`
	// Maximum number of CPU cores in the project (set to -1 for unlimited)
	QuotaCPU *int `json:"quotaCpu,omitempty"`
	// Maximum MiB of RAM in the project (set to -1 for unlimited)
	QuotaRAM *int `json:"quotaRam,omitempty"`
	// Maximum MiB of Disk in the project (set to -1 for unlimited)
	QuotaDisk *int `json:"quotaDisk,omitempty"`
	// Maximum number of networks in the project (set to -1 for unlimited)
	QuotaNetwork *int `json:"quotaNetwork,omitempty"`
	// Maximum number of routers in the project (set to -1 for unlimited)
	QuotaRouter *int `json:"quotaRouter,omitempty"`
}

type ProjectPage struct {
	Projects []*ent.Project `json:"projects"`
	Total    int            `json:"total"`
}

type ProviderInput struct {
	DisplayName     string `json:"displayName"`
	ProviderGitURL  string `json:"providerGitUrl"`
	ProviderVersion string `json:"providerVersion"`
	ConfigBytes     string `json:"configBytes"`
}

type ProviderPage struct {
	Providers []*ent.Provider `json:"providers"`
	Total     int             `json:"total"`
}

type UserInput struct {
	Username  string  `json:"username"`
	Password  *string `json:"password,omitempty"`
	Email     string  `json:"email"`
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
}

type UserPage struct {
	Users []*ent.User `json:"users"`
	Total int         `json:"total"`
}

type DeploymentNodeState string

const (
	DeploymentNodeStateToDeploy       DeploymentNodeState = "to_deploy"
	DeploymentNodeStateToDestroy      DeploymentNodeState = "to_destroy"
	DeploymentNodeStateToRebuild      DeploymentNodeState = "to_rebuild"
	DeploymentNodeStateParentAwaiting DeploymentNodeState = "parent_awaiting"
	DeploymentNodeStateChildAwaiting  DeploymentNodeState = "child_awaiting"
	DeploymentNodeStateInProgress     DeploymentNodeState = "in_progress"
	DeploymentNodeStateComplete       DeploymentNodeState = "complete"
	DeploymentNodeStateTainted        DeploymentNodeState = "tainted"
	DeploymentNodeStateFailed         DeploymentNodeState = "failed"
	DeploymentNodeStateDestroyed      DeploymentNodeState = "destroyed"
)

var AllDeploymentNodeState = []DeploymentNodeState{
	DeploymentNodeStateToDeploy,
	DeploymentNodeStateToDestroy,
	DeploymentNodeStateToRebuild,
	DeploymentNodeStateParentAwaiting,
	DeploymentNodeStateChildAwaiting,
	DeploymentNodeStateInProgress,
	DeploymentNodeStateComplete,
	DeploymentNodeStateTainted,
	DeploymentNodeStateFailed,
	DeploymentNodeStateDestroyed,
}

func (e DeploymentNodeState) IsValid() bool {
	switch e {
	case DeploymentNodeStateToDeploy, DeploymentNodeStateToDestroy, DeploymentNodeStateToRebuild, DeploymentNodeStateParentAwaiting, DeploymentNodeStateChildAwaiting, DeploymentNodeStateInProgress, DeploymentNodeStateComplete, DeploymentNodeStateTainted, DeploymentNodeStateFailed, DeploymentNodeStateDestroyed:
		return true
	}
	return false
}

func (e DeploymentNodeState) String() string {
	return string(e)
}

func (e *DeploymentNodeState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeploymentNodeState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeploymentNodeState", str)
	}
	return nil
}

func (e DeploymentNodeState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeploymentState string

const (
	DeploymentStateAwaiting   DeploymentState = "awaiting"
	DeploymentStateInProgress DeploymentState = "in_progress"
	DeploymentStateComplete   DeploymentState = "complete"
	DeploymentStateFailed     DeploymentState = "failed"
	DeploymentStateDestroyed  DeploymentState = "destroyed"
	DeploymentStateSuspended  DeploymentState = "suspended"
)

var AllDeploymentState = []DeploymentState{
	DeploymentStateAwaiting,
	DeploymentStateInProgress,
	DeploymentStateComplete,
	DeploymentStateFailed,
	DeploymentStateDestroyed,
	DeploymentStateSuspended,
}

func (e DeploymentState) IsValid() bool {
	switch e {
	case DeploymentStateAwaiting, DeploymentStateInProgress, DeploymentStateComplete, DeploymentStateFailed, DeploymentStateDestroyed, DeploymentStateSuspended:
		return true
	}
	return false
}

func (e DeploymentState) String() string {
	return string(e)
}

func (e *DeploymentState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeploymentState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeploymentState", str)
	}
	return nil
}

func (e DeploymentState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ResourceType string

const (
	ResourceTypeResource ResourceType = "RESOURCE"
	ResourceTypeData     ResourceType = "DATA"
)

var AllResourceType = []ResourceType{
	ResourceTypeResource,
	ResourceTypeData,
}

func (e ResourceType) IsValid() bool {
	switch e {
	case ResourceTypeResource, ResourceTypeData:
		return true
	}
	return false
}

func (e ResourceType) String() string {
	return string(e)
}

func (e *ResourceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResourceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResourceType", str)
	}
	return nil
}

func (e ResourceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
