# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - permission/actions/actions_gen.graphqls
  - graph/*.graphqls

# Where should the generated server code go?
exec:
  filename: graph/generated/generated.go
  package: generated

# Uncomment to enable federation
# federation:
#   filename: graph/generated/federation.go
#   package: generated

# Where should any generated models go?
model:
  filename: graph/model/models_gen.go
  package: model

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: graph
  package: graph

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "github.com/cble-platform/cble/backend/ent"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/cble-platform/cble/backend/graph/model.UUID
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Uint:
    model:
      - github.com/99designs/gqlgen/graphql.Uint
      - github.com/99designs/gqlgen/graphql.Uint64
      - github.com/99designs/gqlgen/graphql.Uint32
  Map:
    model:
      - github.com/99designs/gqlgen/graphql.Map
  StrMap:
    model:
      - github.com/cble-platform/cble/backend/graph/model.StrMap
  VarTypeMap:
    model:
      - github.com/cble-platform/cble/backend/graph/model.VarTypeMap
  BlueprintObject:
    model:
      - github.com/cble-platform/cble/backend/engine/models.Object
  UUID:
    model:
      - github.com/cble-platform/cble/backend/graph/model.UUID
  Action:
    model:
      - github.com/cble-platform/cble/backend/permission/actions.PermissionAction
  SubjectType:
    model:
      - github.com/cble-platform/cble/backend/ent/grantedpermission.SubjectType
  ObjectType:
    model:
      - github.com/cble-platform/cble/backend/ent/grantedpermission.ObjectType
      - github.com/cble-platform/cble/backend/ent/grantedpermission.SubjectType
  PowerState:
    model:
      - github.com/cble-platform/cble/backend/graph/model.PowerState
      # - github.com/cble-platform/cble-provider-grpc/pkg/provider.PowerState
  ResourceFeatures:
    model:
      - github.com/cble-platform/cble-provider-grpc/pkg/provider.Features
  ResourceQuotaRequirements:
    model:
      - github.com/cble-platform/cble-provider-grpc/pkg/provider.QuotaRequirements
  MembershipRole:
    model:
      - github.com/cble-platform/cble/backend/ent/membership.Role
  GroupMembershipRole:
    model:
      - github.com/cble-platform/cble/backend/ent/groupmembership.Role
