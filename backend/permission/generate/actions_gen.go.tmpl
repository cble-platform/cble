// Code generated by github.com/cble-platform/cble/backend, DO NOT EDIT.

package actions

import (
	"encoding/json"
	"fmt"
	"io"
	"strings"

	"github.com/99designs/gqlgen/graphql"
)

type PermissionAction string

const (
  {{- range $target, $actions := . }}
	// -----------------------------------------------------------------
  // {{ $target | Title }}
	// -----------------------------------------------------------------

  {{ range $actions.Content }}
	{{- if ne .LineComment "" }}
	// {{ .LineComment | TrimCommentPrefix }}
	{{- end }}
  Action{{- $target | Title -}}{{- .Value | Title }} PermissionAction = "{{- $target | ToLower -}}_{{- .Value | ToLower -}}"
  {{- end }}
  {{- end }}
	// Returned for any potential errors
	ActionUnknown PermissionAction = "unknown"
)


// String strips the object-specific prefix from
func (p PermissionAction) DisplayString() string {
	if before, after, ok := strings.Cut(string(p), "_"); !ok {
		return before
	} else {
		return after
	}
}

var actionMap = map[string]map[string]PermissionAction{
  {{- range $target, $actions := . }}
  // {{ $target | Title }}
  "{{- $target | ToLower -}}": {
  {{- range $actions.Content }}
    "{{- .Value | ToLower -}}": Action{{- $target | Title -}}{{- .Value | Title -}},
  {{- end }}
  },
  {{- end }}
}

// Returns a PermissionAction for a given object and action
func Get(object string, action string) PermissionAction {
	pa, ok := actionMap[strings.ToLower(object)][strings.ToLower(action)]
	if !ok {
		return ActionUnknown
	} else {
		return pa
	}
}

// Values provides list valid values for Enum.
func (PermissionAction) Values() (kinds []string) {
  for _, s := range []PermissionAction{
    {{- range $target, $actions := . }}
    {{- range $actions.Content }}
    Action{{- $target | Title -}}{{- .Value | Title -}},
    {{- end }}
    {{- end }}
    ActionUnknown,
	} {
    kinds = append(kinds, string(s))
  }
  return
}

func MarshalPermissionAction(val PermissionAction) graphql.Marshaler {
	return graphql.WriterFunc(func(w io.Writer) {
		err := json.NewEncoder(w).Encode(val)
		if err != nil {
			panic(err)
		}
	})
}

func UnmarshalPermissionAction(v interface{}) (PermissionAction, error) {
	if m, ok := v.(string); ok {
		return PermissionAction(m), nil
	}

	return ActionUnknown, fmt.Errorf("%T is not a valid action", v)
}