scalar Time
scalar Map
scalar StrMap
scalar UUID

type Blueprint {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  description: String!
  blueprintTemplate: String!

  parentGroup: Group!
  provider: Provider!
  deployments: [Deployment]!
}

type Deployment {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  description: String!
  templateVars: Map!
  deploymentVars: Map!
  deploymentState: StrMap!

  blueprint: Blueprint!
  requester: User!
}

enum DeployResourceType {
  UNKNOWN
  HOST
  NETWORK
  ROUTER
}

type DeployResource {
  key: String!
  deploymentId: ID!
  name: String!
  type: DeployResourceType!
}

type Group {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!

  children: [Group]
  parent: Group
  users: [User]
  permissionPolicies: [PermissionPolicy]
  blueprints: [Blueprint]
}

type Permission {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  key: String

  permissionPolicies: [PermissionPolicy]
}

enum PermissionPolicyType {
  ALLOW
  DENY
}

type PermissionPolicy {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  type: PermissionPolicyType!

  permission: Permission!
  group: Group!
}

type Provider {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  displayName: String!
  providerGitUrl: String!
  providerVersion: String!
  configBytes: String!
  isLoaded: Boolean!

  blueprints: [Blueprint]
}

enum CommandType {
  CONFIGURE
  DEPLOY
  DESTROY
}

enum CommandStatus {
  QUEUED
  FAILED
  SUCCEEDED
  INPROGRESS
}

type ProviderCommand {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  commandType: CommandType!
  status: CommandStatus!
  startTime: Time
  endTime: Time
  output: String!
  errors: [String!]!
}

type User {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  username: String!
  email: String!
  firstName: String!
  lastName: String!

  groups: [Group]!
  deployments: [Deployment]!
}

directive @permission(key: String!) on FIELD_DEFINITION

type Query {
  """
  Get current user
  """
  me: User!
  """
  Retrieves if the current user has a given permission
  """
  meHasPermission(key: String!): Boolean!
  """
  List users (requires permission `com.cble.users.list`)
  """
  users: [User!]! @permission(key: "com.cble.users.list")
  """
  Get a user (requires permission `com.cble.users.read`)
  """
  user(id: ID!): User! @permission(key: "com.cble.users.read")
  """
  List groups (requires permission `com.cble.groups.list`)
  """
  groups: [Group!]! @permission(key: "com.cble.groups.list")
  """
  Get a group (requires permission `com.cble.groups.read`)
  """
  group(id: ID!): Group! @permission(key: "com.cble.groups.read")
  """
  List providers (requires permission `com.cble.providers.list`)
  """
  providers: [Provider!]! @permission(key: "com.cble.providers.list")
  """
  Get a provider (requires permission `com.cble.providers.read`)
  """
  provider(id: ID!): Provider! @permission(key: "com.cble.providers.read")
  """
  List provider commands (requires permission `com.cble.providercommands.list`)
  """
  providerCommands: [ProviderCommand!]! @permission(key: "com.cble.providercommands.list")
  """
  Get a provider command (requires permission `com.cble.providercommands.read`)
  """
  providerCommand(id: ID!): ProviderCommand! @permission(key: "com.cble.providercommands.read")
  """
  List blueprints (requires permission `com.cble.blueprints.list`)
  """
  blueprints: [Blueprint!]! @permission(key: "com.cble.blueprints.list")
  """
  Get a blueprint (requires permission `com.cble.blueprints.read`)
  """
  blueprint(id: ID!): Blueprint! @permission(key: "com.cble.blueprints.read")
  """
  List deployments (requires permission `com.cble.deployments.list`)
  """
  deployments: [Deployment!]! @permission(key: "com.cble.deployments.list")
  """
  Get a deployment (requires permission `com.cble.deployments.read`)
  """
  deployment(id: ID!): Deployment! @permission(key: "com.cble.deployments.read")
}

input BlueprintInput {
  name: String!
  description: String!
  blueprintTemplate: String!

  parentGroupId: ID!
  providerId: ID!
}

input DeploymentInput {
  name: String!
}

input ProviderInput {
  displayName: String!
  providerGitUrl: String!
  providerVersion: String!
  configBytes: String!
}

input UserInput {
  username: String!
  email: String!
  firstName: String!
  lastName: String!

  groupIds: [ID!]!
}

type Mutation {
  ##################
  # AUTHENTICATION #
  ##################

  """
  Change current user's password
  """
  selfChangePassword(currentPassword: String!, newPassword: String!): Boolean!

  ########
  # CRUD #
  ########

  """
  Create a user (requires permission `com.cble.users.create`)
  """
  createUser(input: UserInput!): User! @permission(key: "com.cble.users.create")
  """
  Update a user (requires permission `com.cble.users.update`)
  """
  updateUser(id: ID!, input: UserInput!): User! @permission(key: "com.cble.users.update")
  """
  Delete a user (requires permission `com.cble.users.delete`)
  """
  deleteUser(id: ID!): Boolean! @permission(key: "com.cble.users.delete")
  """
  Create a provider (requires permission `com.cble.providers.create`)
  """
  createProvider(input: ProviderInput!): Provider! @permission(key: "com.cble.providers.create")
  """
  Update a provider (requires permission `com.cble.providers.update`)
  """
  updateProvider(id: ID!, input: ProviderInput!): Provider! @permission(key: "com.cble.providers.update")
  """
  Delete a provider (requires permission `com.cble.providers.delete`)
  """
  deleteProvider(id: ID!): Boolean! @permission(key: "com.cble.providers.delete")
  """
  Create a blueprint (requires permission `com.cble.blueprints.create`)
  """
  createBlueprint(input: BlueprintInput!): Blueprint! @permission(key: "com.cble.blueprints.create")
  """
  Update a blueprint (requires permission `com.cble.blueprints.update`)
  """
  updateBlueprint(id: ID!, input: BlueprintInput!): Blueprint! @permission(key: "com.cble.blueprints.update")
  """
  Delete a blueprint (requires permission `com.cble.blueprints.delete`)
  """
  deleteBlueprint(id: ID!): Boolean! @permission(key: "com.cble.blueprints.delete")
  """
  Update a deployment (requires permission `com.cble.deployments.update`)
  """
  updateDeployment(id: ID!, input: DeploymentInput!): Deployment! @permission(key: "com.cble.deployments.update")

  #############
  # PROVIDERS #
  #############

  """
  Load a provider to connect it to CBLE (requires permission `com.cble.providers.load`)
  """
  loadProvider(id: ID!): Provider! @permission(key: "com.cble.providers.load")
  """
  Unload a provider to disconnect it from CBLE (requires permission `com.cble.providers.unload`)
  """
  unloadProvider(id: ID!): Provider! @permission(key: "com.cble.providers.unload")
  """
  Applies the stored configuration to the provider (requires permission `com.cble.providers.configure`)
  """
  configureProvider(id: ID!): Provider! @permission(key: "com.cble.providers.configure")

  ##############
  # DEPLOYMENT #
  ##############

  """
  Deploy a blueprint (requires permission `com.cble.blueprints.deploy`)
  """
  deployBlueprint(id: ID!): Deployment! @permission(key: "com.cble.blueprints.deploy")
  """
  Destroy a deployment (requires permission `com.cble.deployments.destroy`)
  """
  destroyDeployment(id: ID!): Deployment! @permission(key: "com.cble.deployments.destroy")
  """
  Get a vm console (requires permission `com.cble.deployments.console`)
  """
  getConsole(id: ID!, hostKey: String!): String! @permission(key: "com.cble.deployments.console")
  """
  Get a list of resources in a deployment (requires permission `com.cble.deployments.resources`)
  """
  deploymentResources(id: ID!): [DeployResource!]! @permission(key: "com.cble.deployments.resources")
}
